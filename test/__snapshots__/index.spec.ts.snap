// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`v2 should generate: ./test/generated/v2/core/ApiError.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';

interface ErrorOptions {
    cause?: unknown;
    getErrorDetail?: (message: string, response: ApiResult) => ApiErrorDetail;
}

export interface ApiInnerError {
  code: string;
  [key: string]: string | undefined;
}

export interface ApiErrorDetail {
    /**
     * Error message returned by the API.
     *
     * Defaults to the original error message.
     */
    message: string;

    /**
     * Brief description of the error.
     */
    shortText: string;

    /**
     * More detailed description of the error.
     */
    longText?: string;

    /**
     * Error code returned by the API.
     */
    code?: string;

    /**
     * Identifier for the error.
     */
    id?: string;

    /**
     * The target of the error.
     */
    target?: string;
}

export class ApiError extends Error {
    public readonly url: string;
    public readonly status: number;
    public readonly statusText: string;
    public readonly body: any;
    public readonly request: ApiRequestOptions;
    public readonly operation: string;
    public readonly detail: ApiErrorDetail;
    public readonly code?: string;

    public static getInnerError(response: ApiResult): ApiInnerError | undefined {
        let innerError: ApiInnerError | undefined;
        if (typeof response.body === 'object' && response.body) {
            innerError = response.body?.error?.innererror || response.body?.error;
        }
        return innerError;
    }

    public static getApiErrorDetail(message: string, response: ApiResult): ApiErrorDetail {
        const innerError = ApiError.getInnerError(response);
        const detail: ApiErrorDetail = {
            code: innerError?.code,
            id: innerError?.id,
            message: innerError?.message ?? message,
            shortText: innerError?.shortText ?? response.statusText,
            longText: innerError?.longText,
            target: innerError?.target,
        };
        return detail;
    }

    public static isApiError(error: unknown): error is ApiError {
        return error instanceof Error && error.name === 'ApiError';
    }

    constructor(request: ApiRequestOptions, response: ApiResult, message: string, options?: ErrorOptions) {
        // @ts-ignore -- \\"options\\" only available in ES2022+
        super(message, { cause: options?.cause });

        // Maintains proper stack trace for where our error was thrown (only available on V8)
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, ApiError);
        }

        this.name = 'ApiError';
        this.url = response.url;
        this.status = response.status;
        this.statusText = response.statusText;
        this.body = response.body;
        this.request = request;
        this.operation = request.operation;

        const getErrorDetail = options?.getErrorDetail ?? ApiError.getApiErrorDetail;
        this.detail = getErrorDetail(message, response);
        this.code = this.detail.code;
    }

    public get isCancelled(): boolean {
        return false;
    }
}

export class CancelError extends Error {
    public readonly request: ApiRequestOptions;
    public readonly operation: string;
    public readonly detail: ApiErrorDetail;
    public readonly code?: string;

    public static isCancelError(error: unknown): error is ApiError {
        return error instanceof Error && error.name === 'CancelError';
    }

    constructor(request: ApiRequestOptions, message: string, options?: ErrorOptions) {
        // @ts-ignore -- \\"options\\" only available in ES2022+
        super(message, { cause: options?.cause });

        // Maintains proper stack trace for where our error was thrown (only available on V8)
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, CancelError);
        }

        this.name = 'CancelError';
        this.request = request;
        this.operation = request.operation;
        const getErrorDetail = options?.getErrorDetail ?? ApiError.getApiErrorDetail;
        this.detail = getErrorDetail(message, { url: request.url, status: 0, statusText: 'Cancelled', ok: false, body: undefined, cancelled: true });
        this.code = this.detail.code;
    }

    public get isCancelled(): boolean {
        return true;
    }
}
"
`;

exports[`v2 should generate: ./test/generated/v2/core/ApiRequestOptions.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { ApiResult } from './ApiResult';

export type ApiRequestMethod = 'GET' | 'PUT' | 'POST' | 'DELETE' | 'OPTIONS' | 'HEAD' | 'PATCH';

export interface ApiRequestOptions {
    readonly method: ApiRequestMethod;
    readonly operation: string;
    readonly url: string;
    readonly path?: Record<string, any>;
    readonly cookies?: Record<string, any>;
    readonly headers?: Record<string, any>;
    readonly query?: Record<string, any>;
    readonly formData?: Record<string, any>;
    readonly body?: any;
    readonly mediaType?: string;
    readonly responseHeader?: string;
    readonly errors?: Record<number, string>;
    readonly onDownloadProgress?: (event: ProgressEvent) => void;
    readonly onUploadProgress?: (event: ProgressEvent) => void;
    readonly signal?: AbortSignal;
    readonly errorHandler?: (
        options: ApiRequestOptions,
        result: ApiResult,
        message: string,
    ) => void;
}
"
`;

exports[`v2 should generate: ./test/generated/v2/core/ApiResult.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export interface ApiResult {
    readonly url: string;
    readonly ok: boolean;
    readonly status: number;
    readonly statusText: string;
    readonly body: any;
    readonly cancelled?: boolean;
}
"
`;

exports[`v2 should generate: ./test/generated/v2/core/OpenAPI.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { ApiErrorDetail } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';

type Resolver<T> = (options: ApiRequestOptions) => Promise<T>;
type Headers = Record<string, string>;

export interface OpenAPIConfig {
    apiVersion: string;
    baseUrl: string;
    withCredentials: boolean;
    credentials: 'include' | 'omit' | 'same-origin';
    token?: string | Resolver<string>;
    username?: string | Resolver<string>;
    password?: string | Resolver<string>;
    headers?: Headers | Resolver<Headers>;
    encodePath?: (path: string) => string;
    getErrorDetail?: (message: string, response: ApiResult) => ApiErrorDetail;
}

export const OpenAPI: OpenAPIConfig = {
    apiVersion: '1.0',
    baseUrl: 'http://localhost:3000/base',
    withCredentials: false,
    credentials: 'include',
};
"
`;

exports[`v2 should generate: ./test/generated/v2/core/functions.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import { ApiError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import type { OpenAPIConfig } from './OpenAPI';

export const base64 = (str: string): string => {
    try {
        return btoa(str);
    } catch (err) {
        // @ts-ignore
        return Buffer.from(str).toString('base64');
    }
};

export const catchErrorCodes = (config: OpenAPIConfig, options: ApiRequestOptions, result: ApiResult): void => {
    const errors: Record<number, string> = {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Internal Server Error',
        502: 'Bad Gateway',
        503: 'Service Unavailable',
        ...options.errors,
    };

    const error = errors[result.status];
    if (options.errorHandler && !result.ok) {
        options.errorHandler(options, result, error ?? 'Generic Error');
    }
    if (error) {
        throw new ApiError(options, result, error, { getErrorDetail: config.getErrorDetail });
    }
    if (!result.ok) {
        throw new ApiError(options, result, 'Generic Error', { getErrorDetail: config.getErrorDetail });
    }
};

export const getFormData = (options: ApiRequestOptions): FormData | undefined => {
    if (options.formData) {
        const formData = new FormData();

        const process = (key: string, value: any) => {
            if (isString(value) || isBlob(value)) {
                formData.append(key, value);
            } else {
                formData.append(key, JSON.stringify(value));
            }
        };

        Object.entries(options.formData)
            .filter(([_, value]) => isDefined(value))
            .forEach(([key, value]) => {
                if (Array.isArray(value)) {
                    value.forEach(v => process(key, v));
                } else {
                    process(key, value);
                }
            });

        return formData;
    }
    return undefined;
};

export const getHeaders = async (config: OpenAPIConfig, options: ApiRequestOptions): Promise<Headers> => {
    const token = await resolve(options, config.token);
    const username = await resolve(options, config.username);
    const password = await resolve(options, config.password);
    const additionalHeaders = await resolve(options, config.headers);

    const headers = Object.entries({
        Accept: 'application/json',
        ...additionalHeaders,
        ...options.headers,
    })
        .filter(([_, value]) => isDefined(value))
        .reduce(
            (headers, [key, value]) => ({
                ...headers,
                [key]: String(value),
            }),
            {} as Record<string, string>
        );

    if (isStringWithValue(token)) {
        headers['Authorization'] = \`Bearer \${token}\`;
    }

    if (isStringWithValue(username) && isStringWithValue(password)) {
        const credentials = base64(\`\${username}:\${password}\`);
        headers['Authorization'] = \`Basic \${credentials}\`;
    }

    if (options.body) {
        if (options.mediaType) {
            headers['Content-Type'] = options.mediaType;
        } else if (isBlob(options.body)) {
            headers['Content-Type'] = options.body.type || 'application/octet-stream';
        } else if (isString(options.body)) {
            headers['Content-Type'] = 'text/plain';
        } else if (!isFormData(options.body)) {
            headers['Content-Type'] = 'application/json';
        }
    }

    return new Headers(headers);
};

export const getRequestBody = (options: ApiRequestOptions): any => {
    if (options.body !== undefined) {
        if (options.mediaType?.includes('/json')) {
            return JSON.stringify(options.body);
        } else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {
            return options.body;
        } else {
            return JSON.stringify(options.body);
        }
    }
    return undefined;
};

export const getQueryString = (params: Record<string, any>): string => {
    const qs: string[] = [];

    const append = (key: string, value: any) => {
        qs.push(\`\${encodeURIComponent(key)}=\${encodeURIComponent(String(value))}\`);
    };

    const process = (key: string, value: any) => {
        if (isDefined(value)) {
            if (Array.isArray(value)) {
                value.forEach(v => {
                    process(key, v);
                });
            } else if (typeof value === 'object') {
                Object.entries(value).forEach(([k, v]) => {
                    process(\`\${key}[\${k}]\`, v);
                });
            } else {
                append(key, value);
            }
        }
    };

    Object.entries(params).forEach(([key, value]) => {
        process(key, value);
    });

    if (qs.length > 0) {
        return \`?\${qs.join('&')}\`;
    }

    return '';
};

export const getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {
    const encoder = config.encodePath || encodeURI;

    const path = options.url
        .replace('{api-version}', config.apiVersion)
        .replace(/{(.*?)}/g, (substring: string, group: string) => {
            if (options.path?.hasOwnProperty(group)) {
                return encoder(String(options.path[group]));
            }
            return substring;
        });

    const url = \`\${config.baseUrl}\${path}\`;
    if (options.query) {
        return \`\${url}\${getQueryString(options.query)}\`;
    }
    return url;
};

export const isBlob = (value: any): value is Blob => {
    return (
        typeof value === 'object' &&
        typeof value.type === 'string' &&
        typeof value.stream === 'function' &&
        typeof value.arrayBuffer === 'function' &&
        typeof value.constructor === 'function' &&
        typeof value.constructor.name === 'string' &&
        /^(Blob|File)$/.test(value.constructor.name) &&
        /^(Blob|File)$/.test(value[Symbol.toStringTag])
    );
};

export const isDefined = <T>(value: T | null | undefined): value is Exclude<T, null | undefined> => {
    return value !== undefined && value !== null;
};

export const isFormData = (value: unknown): value is FormData => {
    return value instanceof FormData;
};

export const isString = (value: unknown): value is string => {
    return typeof value === 'string';
};

export const isStringWithValue = (value: unknown): value is string => {
    return isString(value) && value !== '';
};

export const isSuccess = (status: number): boolean => {
    return status >= 200 && status < 300;
};

type Resolver<T> = (options: ApiRequestOptions) => Promise<T>;

export const resolve = async <T>(options: ApiRequestOptions, resolver?: T | Resolver<T>): Promise<T | undefined> => {
    if (typeof resolver === 'function') {
        return (resolver as Resolver<T>)(options);
    }
    return resolver;
};
"
`;

exports[`v2 should generate: ./test/generated/v2/core/request.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import { CancelError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { OpenAPIConfig } from './OpenAPI';
import { request as requestFetch } from './requestFetch';

/**
 * Request method
 * @param config The OpenAPI configuration object
 * @param options The request options from the service
 * @returns Promise<T>
 * @throws ApiError
 * @throws CancelError
 */
export const request = async <T>(config: OpenAPIConfig, options: ApiRequestOptions): Promise<T> => {
    try {
        let result: T;
        if (options.onDownloadProgress || options.onUploadProgress) {
            const { request: requestXhr } = await import('./requestXhr');
            result = await requestXhr(config, options);
        } else {
            result = await requestFetch(config, options);
        }
        return result;
    } catch (e) {
        let error = e;
        if (e instanceof Error && e.name === 'AbortError') {
            error = new CancelError(options, 'Request aborted', { cause: e, getErrorDetail: config.getErrorDetail });
        } else if (options.signal?.aborted && options.signal?.reason) {
            error = new CancelError(options, 'Request aborted', { cause: options.signal?.reason, getErrorDetail: config.getErrorDetail });
        }
        throw error;
    }
};
"
`;

exports[`v2 should generate: ./test/generated/v2/core/requestFetch.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import type { OpenAPIConfig } from './OpenAPI';
import { catchErrorCodes, getFormData, getHeaders, getRequestBody, getUrl, isString } from './functions';

const sendRequest = async (
    config: OpenAPIConfig,
    options: ApiRequestOptions,
    url: string,
    body: any,
    formData: FormData | undefined,
    headers: Headers
): Promise<Response> => {
    const request: RequestInit = {
        headers,
        body: body ?? formData,
        method: options.method,
        signal: options.signal,
    };

    if (config.withCredentials) {
        request.credentials = config.credentials;
    }

    return await fetch(url, request);
};

const getResponseBody = async (response: Response): Promise<any> => {
    if (response.status !== 204) {
        try {
            const contentType = response.headers.get('Content-Type');
            if (contentType) {
                const isJSON = contentType.toLowerCase().startsWith('application/json');
                if (isJSON) {
                    return await response.json();
                } else {
                    return await response.text();
                }
            }
        } catch (error) {
            console.error(error);
        }
    }
    return undefined;
};

const getResponseHeader = (response: Response, responseHeader?: string): string | undefined => {
    if (responseHeader) {
        const content = response.headers.get(responseHeader);
        if (isString(content)) {
            return content;
        }
    }
    return undefined;
};

/**
 * Request method
 * @param config The OpenAPI configuration object
 * @param options The request options from the service
 * @returns Promise<T>
 * @throws ApiError
 */
export const request = async <T>(config: OpenAPIConfig, options: ApiRequestOptions): Promise<T> => {
    const url = getUrl(config, options);
    const formData = getFormData(options);
    const body = getRequestBody(options);
    const headers = await getHeaders(config, options);

    options.signal?.throwIfAborted();

    const response = await sendRequest(config, options, url, body, formData, headers);
    const responseBody = await getResponseBody(response);
    const responseHeader = getResponseHeader(response, options.responseHeader);

    const result: ApiResult = {
        url,
        ok: response.ok,
        status: response.status,
        statusText: response.statusText,
        body: responseHeader ?? responseBody,
    };

    catchErrorCodes(config, options, result);

    return result.body;
};
"
`;

exports[`v2 should generate: ./test/generated/v2/core/requestXhr.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import type { OpenAPIConfig } from './OpenAPI';
import { getUrl, getFormData, getRequestBody, getHeaders, isSuccess, catchErrorCodes, isString } from './functions';

const getResponseBody = (xhr: XMLHttpRequest): any => {
    if (xhr.status !== 204) {
        try {
            const contentType = xhr.getResponseHeader('Content-Type');
            if (contentType) {
                const isJSON = contentType.toLowerCase().startsWith('application/json');
                if (isJSON) {
                    return JSON.parse(xhr.responseText);
                } else {
                    return xhr.responseText;
                }
            }
        } catch (error) {
            console.error(error);
        }
    }
    return undefined;
};

const getResponseHeader = (xhr: XMLHttpRequest, responseHeader?: string): string | undefined => {
    if (responseHeader) {
        const content = xhr.getResponseHeader(responseHeader);
        if (isString(content)) {
            return content;
        }
    }
    return undefined;
};

const sendRequest = async (
    config: OpenAPIConfig,
    options: ApiRequestOptions,
    url: string,
    body: any,
    formData: FormData | undefined,
    headers: Headers
): Promise<XMLHttpRequest> => {
    const xhr = new XMLHttpRequest();
    xhr.open(options.method, url, true);
    xhr.withCredentials = config.withCredentials;

    headers.forEach((value, key) => {
        xhr.setRequestHeader(key, value);
    });

    return new Promise<XMLHttpRequest>((resolve, reject) => {
        xhr.onload = () => resolve(xhr);
        xhr.onabort = () => reject(new Error('Request aborted'));
        xhr.onerror = () => reject(new Error('Network error'));
        if (options.onDownloadProgress) {
            xhr.onprogress = options.onDownloadProgress;
        }
        if (options.onUploadProgress) {
            xhr.upload.onprogress = options.onUploadProgress;
        }
        if (options.signal) {
            options.signal.addEventListener('abort', () => xhr.abort());
        }
        xhr.send(body ?? formData);
    });
};

/**
 * Request method
 * @param config The OpenAPI configuration object
 * @param options The request options from the service
 * @returns Promise<T>
 * @throws ApiError
 */
export const request = async <T>(config: OpenAPIConfig, options: ApiRequestOptions): Promise<T> => {
    const url = getUrl(config, options);
    const formData = getFormData(options);
    const body = getRequestBody(options);
    const headers = await getHeaders(config, options);

    options.signal?.throwIfAborted();

    const response = await sendRequest(config, options, url, body, formData, headers);
    const responseBody = getResponseBody(response);
    const responseHeader = getResponseHeader(response, options.responseHeader);

    const result: ApiResult = {
        url,
        ok: isSuccess(response.status),
        status: response.status,
        statusText: response.statusText,
        body: responseHeader ?? responseBody,
    };

    catchErrorCodes(config, options, result);

    return result.body;
};
"
`;

exports[`v2 should generate: ./test/generated/v2/index.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export { ApiError } from './core/ApiError';
export { OpenAPI } from './core/OpenAPI';
export type { OpenAPIConfig } from './core/OpenAPI';

export type { OperationsType } from './models/_symbols';
export type { ArrayWithArray } from './models/ArrayWithArray';
export type { ArrayWithBooleans } from './models/ArrayWithBooleans';
export type { ArrayWithNumbers } from './models/ArrayWithNumbers';
export type { ArrayWithProperties } from './models/ArrayWithProperties';
export type { ArrayWithReferences } from './models/ArrayWithReferences';
export type { ArrayWithStrings } from './models/ArrayWithStrings';
export type { CommentWithBackticks } from './models/CommentWithBackticks';
export type { CommentWithBreaks } from './models/CommentWithBreaks';
export type { CommentWithExpressionPlaceholders } from './models/CommentWithExpressionPlaceholders';
export type { CommentWithQuotes } from './models/CommentWithQuotes';
export type { CommentWithReservedCharacters } from './models/CommentWithReservedCharacters';
export type { CommentWithSlashes } from './models/CommentWithSlashes';
export type { Date } from './models/Date';
export type { DictionaryWithArray } from './models/DictionaryWithArray';
export type { DictionaryWithDictionary } from './models/DictionaryWithDictionary';
export type { DictionaryWithProperties } from './models/DictionaryWithProperties';
export type { DictionaryWithReference } from './models/DictionaryWithReference';
export type { DictionaryWithString } from './models/DictionaryWithString';
export type { EnumFromDescription } from './models/EnumFromDescription';
export type { EnumWithExtensions } from './models/EnumWithExtensions';
export type { EnumWithNumbers } from './models/EnumWithNumbers';
export type { EnumWithStrings } from './models/EnumWithStrings';
export type { ModelThatExtends } from './models/ModelThatExtends';
export type { ModelThatExtendsExtends } from './models/ModelThatExtendsExtends';
export type { ModelWithArray } from './models/ModelWithArray';
export type { ModelWithBoolean } from './models/ModelWithBoolean';
export type { ModelWithCircularReference } from './models/ModelWithCircularReference';
export type { ModelWithDictionary } from './models/ModelWithDictionary';
export type { ModelWithDuplicateImports } from './models/ModelWithDuplicateImports';
export type { ModelWithDuplicateProperties } from './models/ModelWithDuplicateProperties';
export type { ModelWithEnum } from './models/ModelWithEnum';
export type { ModelWithEnumFromDescription } from './models/ModelWithEnumFromDescription';
export type { ModelWithInteger } from './models/ModelWithInteger';
export type { ModelWithNestedEnums } from './models/ModelWithNestedEnums';
export type { ModelWithNestedProperties } from './models/ModelWithNestedProperties';
export type { ModelWithNullableString } from './models/ModelWithNullableString';
export type { ModelWithOrderedProperties } from './models/ModelWithOrderedProperties';
export type { ModelWithPattern } from './models/ModelWithPattern';
export type { ModelWithProperties } from './models/ModelWithProperties';
export type { ModelWithReference } from './models/ModelWithReference';
export type { ModelWithString } from './models/ModelWithString';
export type { SimpleBoolean } from './models/SimpleBoolean';
export type { SimpleFile } from './models/SimpleFile';
export type { SimpleInteger } from './models/SimpleInteger';
export type { SimpleReference } from './models/SimpleReference';
export type { SimpleString } from './models/SimpleString';
export type { SimpleStringWithPattern } from './models/SimpleStringWithPattern';

export { $ArrayWithArray } from './schemas/$ArrayWithArray';
export { $ArrayWithBooleans } from './schemas/$ArrayWithBooleans';
export { $ArrayWithNumbers } from './schemas/$ArrayWithNumbers';
export { $ArrayWithProperties } from './schemas/$ArrayWithProperties';
export { $ArrayWithReferences } from './schemas/$ArrayWithReferences';
export { $ArrayWithStrings } from './schemas/$ArrayWithStrings';
export { $CommentWithBackticks } from './schemas/$CommentWithBackticks';
export { $CommentWithBreaks } from './schemas/$CommentWithBreaks';
export { $CommentWithExpressionPlaceholders } from './schemas/$CommentWithExpressionPlaceholders';
export { $CommentWithQuotes } from './schemas/$CommentWithQuotes';
export { $CommentWithReservedCharacters } from './schemas/$CommentWithReservedCharacters';
export { $CommentWithSlashes } from './schemas/$CommentWithSlashes';
export { $Date } from './schemas/$Date';
export { $DictionaryWithArray } from './schemas/$DictionaryWithArray';
export { $DictionaryWithDictionary } from './schemas/$DictionaryWithDictionary';
export { $DictionaryWithProperties } from './schemas/$DictionaryWithProperties';
export { $DictionaryWithReference } from './schemas/$DictionaryWithReference';
export { $DictionaryWithString } from './schemas/$DictionaryWithString';
export { $EnumFromDescription } from './schemas/$EnumFromDescription';
export { $EnumWithExtensions } from './schemas/$EnumWithExtensions';
export { $EnumWithNumbers } from './schemas/$EnumWithNumbers';
export { $EnumWithStrings } from './schemas/$EnumWithStrings';
export { $ModelThatExtends } from './schemas/$ModelThatExtends';
export { $ModelThatExtendsExtends } from './schemas/$ModelThatExtendsExtends';
export { $ModelWithArray } from './schemas/$ModelWithArray';
export { $ModelWithBoolean } from './schemas/$ModelWithBoolean';
export { $ModelWithCircularReference } from './schemas/$ModelWithCircularReference';
export { $ModelWithDictionary } from './schemas/$ModelWithDictionary';
export { $ModelWithDuplicateImports } from './schemas/$ModelWithDuplicateImports';
export { $ModelWithDuplicateProperties } from './schemas/$ModelWithDuplicateProperties';
export { $ModelWithEnum } from './schemas/$ModelWithEnum';
export { $ModelWithEnumFromDescription } from './schemas/$ModelWithEnumFromDescription';
export { $ModelWithInteger } from './schemas/$ModelWithInteger';
export { $ModelWithNestedEnums } from './schemas/$ModelWithNestedEnums';
export { $ModelWithNestedProperties } from './schemas/$ModelWithNestedProperties';
export { $ModelWithNullableString } from './schemas/$ModelWithNullableString';
export { $ModelWithOrderedProperties } from './schemas/$ModelWithOrderedProperties';
export { $ModelWithPattern } from './schemas/$ModelWithPattern';
export { $ModelWithProperties } from './schemas/$ModelWithProperties';
export { $ModelWithReference } from './schemas/$ModelWithReference';
export { $ModelWithString } from './schemas/$ModelWithString';
export { $SimpleBoolean } from './schemas/$SimpleBoolean';
export { $SimpleFile } from './schemas/$SimpleFile';
export { $SimpleInteger } from './schemas/$SimpleInteger';
export { $SimpleReference } from './schemas/$SimpleReference';
export { $SimpleString } from './schemas/$SimpleString';
export { $SimpleStringWithPattern } from './schemas/$SimpleStringWithPattern';

export * from './services/CollectionFormatService';
export * from './services/ComplexService';
export * from './services/DefaultService';
export * from './services/DefaultsService';
export * from './services/DescriptionsService';
export * from './services/DuplicateService';
export * from './services/ErrorService';
export * from './services/HeaderService';
export * from './services/MultipleTags1Service';
export * from './services/MultipleTags2Service';
export * from './services/MultipleTags3Service';
export * from './services/NoContentService';
export * from './services/ParametersService';
export * from './services/ResponseService';
export * from './services/SimpleService';
export * from './services/TypesService';

export type { CollectionFormatOperation } from './operations/CollectionFormatService';
export type { ComplexTypesOperation } from './operations/ComplexService';
export type { ServiceWithEmptyTagOperation } from './operations/DefaultService';
export type { CallWithDefaultParametersOperation } from './operations/DefaultsService';
export type { CallWithDefaultOptionalParametersOperation } from './operations/DefaultsService';
export type { CallToTestOrderOfParamsOperation } from './operations/DefaultsService';
export type { CallWithDescriptionsOperation } from './operations/DescriptionsService';
export type { DuplicateNameOperation } from './operations/DuplicateService';
export type { DuplicateName1Operation } from './operations/DuplicateService';
export type { DuplicateName2Operation } from './operations/DuplicateService';
export type { DuplicateName3Operation } from './operations/DuplicateService';
export type { TestErrorCodeOperation } from './operations/ErrorService';
export type { CallWithResultFromHeaderOperation } from './operations/HeaderService';
export type { DummyAOperation } from './operations/MultipleTags1Service';
export type { DummyBOperation } from './operations/MultipleTags1Service';
export type { DummyAOperation } from './operations/MultipleTags2Service';
export type { DummyBOperation } from './operations/MultipleTags2Service';
export type { DummyBOperation } from './operations/MultipleTags3Service';
export type { CallWithNoContentResponseOperation } from './operations/NoContentService';
export type { CallWithParametersOperation } from './operations/ParametersService';
export type { CallWithWeirdParameterNamesOperation } from './operations/ParametersService';
export type { CallWithResponseOperation } from './operations/ResponseService';
export type { CallWithDuplicateResponsesOperation } from './operations/ResponseService';
export type { CallWithResponsesOperation } from './operations/ResponseService';
export type { GetCallWithoutParametersAndResponseOperation } from './operations/SimpleService';
export type { PutCallWithoutParametersAndResponseOperation } from './operations/SimpleService';
export type { PostCallWithoutParametersAndResponseOperation } from './operations/SimpleService';
export type { DeleteCallWithoutParametersAndResponseOperation } from './operations/SimpleService';
export type { OptionsCallWithoutParametersAndResponseOperation } from './operations/SimpleService';
export type { HeadCallWithoutParametersAndResponseOperation } from './operations/SimpleService';
export type { PatchCallWithoutParametersAndResponseOperation } from './operations/SimpleService';
export type { TypesOperation } from './operations/TypesService';
"
`;

exports[`v2 should generate: ./test/generated/v2/models/_symbols.ts 1`] = `
"export declare const OperationsType: unique symbol;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ArrayWithArray.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a simple array containing an array
 */
export type ArrayWithArray = Array<Array<ModelWithString>>;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ArrayWithBooleans.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple array with booleans
 */
export type ArrayWithBooleans = Array<boolean>;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ArrayWithNumbers.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple array with numbers
 */
export type ArrayWithNumbers = Array<number>;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ArrayWithProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple array with properties
 */
export type ArrayWithProperties = Array<{
    foo?: string;
    bar?: string;
}>;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ArrayWithReferences.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a simple array with references
 */
export type ArrayWithReferences = Array<ModelWithString>;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ArrayWithStrings.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple array with strings
 */
export type ArrayWithStrings = Array<string>;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/CommentWithBackticks.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work
 */
export type CommentWithBackticks = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/CommentWithBreaks.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export type CommentWithBreaks = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/CommentWithExpressionPlaceholders.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * Testing expression placeholders in string: \${expression} should work
 */
export type CommentWithExpressionPlaceholders = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/CommentWithQuotes.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * Testing quotes in string: 'single quote''' and \\"double quotes\\"\\"\\" should work
 */
export type CommentWithQuotes = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/CommentWithReservedCharacters.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * Testing reserved characters in string: * inline * and ** inline ** should work
 */
export type CommentWithReservedCharacters = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/CommentWithSlashes.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * Testing slashes in string: \\\\backwards\\\\\\\\\\\\ and /forwards/// should work
 */
export type CommentWithSlashes = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/Date.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a type-only model that defines Date as a string
 */
export type Date = string;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/DictionaryWithArray.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a complex dictionary
 */
export type DictionaryWithArray = Record<string, Array<ModelWithString>>;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/DictionaryWithDictionary.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a string dictionary
 */
export type DictionaryWithDictionary = Record<string, Record<string, string>>;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/DictionaryWithProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a complex dictionary
 */
export type DictionaryWithProperties = Record<string, {
    foo?: string;
    bar?: string;
}>;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/DictionaryWithReference.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a string reference
 */
export type DictionaryWithReference = Record<string, ModelWithString>;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/DictionaryWithString.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a string dictionary
 */
export type DictionaryWithString = Record<string, string>;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/EnumFromDescription.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * Success=1,Warning=2,Error=3
 */
export type EnumFromDescription = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/EnumWithExtensions.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple enum with numbers
 */
export type EnumWithExtensions = 200 | 400 | 500;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/EnumWithNumbers.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple enum with numbers
 */
export type EnumWithNumbers = 1 | 2 | 3 | 1.1 | 1.2 | 1.3 | 100 | 200 | 300 | -100 | -200 | -300 | -1.1 | -1.2 | -1.3;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/EnumWithStrings.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple enum with strings
 */
export type EnumWithStrings = 'Success' | 'Warning' | 'Error' | '\\\\'Single Quote\\\\'' | '\\"Double Quotes\\"';
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelThatExtends.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model that extends another model
 */
export type ModelThatExtends = (ModelWithString & {
    propExtendsA?: string;
    propExtendsB?: ModelWithString;
});

"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelThatExtendsExtends.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelThatExtends } from './ModelThatExtends';
import type { ModelWithString } from './ModelWithString';

/**
 * This is a model that extends another model
 */
export type ModelThatExtendsExtends = (ModelWithString & ModelThatExtends & {
    propExtendsC?: string;
    propExtendsD?: ModelWithString;
});

"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithArray.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with one property containing an array
 */
export type ModelWithArray = {
    prop?: Array<ModelWithString>;
    propWithFile?: Array<Blob>;
    propWithNumber?: Array<number>;
};
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithBoolean.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with one boolean property
 */
export type ModelWithBoolean = {
    /**
     * This is a simple boolean property
     */
    prop?: boolean;
};
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithCircularReference.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with one property containing a circular reference
 */
export type ModelWithCircularReference = {
    prop?: ModelWithCircularReference;
};
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithDictionary.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with one property containing a dictionary
 */
export type ModelWithDictionary = {
    prop?: Record<string, string>;
};
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithDuplicateImports.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with duplicated imports
 */
export type ModelWithDuplicateImports = {
    propA?: ModelWithString;
    propB?: ModelWithString;
    propC?: ModelWithString;
};
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithDuplicateProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with duplicated properties
 */
export type ModelWithDuplicateProperties = {
    prop?: ModelWithString;
};
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithEnum.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with one enum
 */
export type ModelWithEnum = {
    /**
     * This is a simple enum with strings
     */
    test?: 'Success' | 'Warning' | 'Error';
    /**
     * These are the HTTP error code enums
     */
    statusCode?: '100' | '200 FOO' | '300 FOO_BAR' | '400 foo-bar' | '500 foo.bar' | '600 foo&bar';
    /**
     * Simple boolean enum
     */
    bool?: boolean;
};
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithEnumFromDescription.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with one enum
 */
export type ModelWithEnumFromDescription = {
    /**
     * Success=1,Warning=2,Error=3
     */
    test?: number;
};
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithInteger.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with one number property
 */
export type ModelWithInteger = {
    /**
     * This is a simple number property
     */
    prop?: number;
};
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithNestedEnums.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with nested enums
 */
export type ModelWithNestedEnums = {
    dictionaryWithEnum?: Record<string, 'Success' | 'Warning' | 'Error'>;
    dictionaryWithEnumFromDescription?: Record<string, number>;
    arrayWithEnum?: Array<'Success' | 'Warning' | 'Error'>;
    arrayWithDescription?: Array<number>;
};
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithNestedProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with one nested property
 */
export type ModelWithNestedProperties = {
    readonly first: {
        readonly second: {
            readonly third: string;
        };
    };
};
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithNullableString.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with one string property
 */
export type ModelWithNullableString = {
    /**
     * This is a simple string property
     */
    nullableProp?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp: string | null;
};
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithOrderedProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with ordered properties
 */
export type ModelWithOrderedProperties = {
    zebra?: string;
    apple?: string;
    hawaii?: string;
};
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithPattern.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model that contains a some patterns
 */
export type ModelWithPattern = {
    key: string;
    name: string;
    readonly enabled?: boolean;
    readonly modified?: string;
    id?: string;
    text?: string;
};
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with one nested property
 */
export type ModelWithProperties = {
    required: string;
    readonly requiredAndReadOnly: string;
    string?: string;
    number?: number;
    boolean?: boolean;
    reference?: ModelWithString;
    'property with space'?: string;
    default?: string;
    try?: string;
    readonly '@namespace.string'?: string;
    readonly '@namespace.integer'?: number;
};
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithReference.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithProperties } from './ModelWithProperties';

/**
 * This is a model with one property containing a reference
 */
export type ModelWithReference = {
    prop?: ModelWithProperties;
};
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithString.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with one string property
 */
export type ModelWithString = {
    /**
     * This is a simple string property
     */
    prop?: string;
};
"
`;

exports[`v2 should generate: ./test/generated/v2/models/SimpleBoolean.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple boolean
 */
export type SimpleBoolean = boolean;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/SimpleFile.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple file
 */
export type SimpleFile = Blob;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/SimpleInteger.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple number
 */
export type SimpleInteger = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/SimpleReference.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a simple reference
 */
export type SimpleReference = ModelWithString;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/SimpleString.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple string
 */
export type SimpleString = string;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/SimpleStringWithPattern.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple string
 */
export type SimpleStringWithPattern = string;
"
`;

exports[`v2 should generate: ./test/generated/v2/operations/CollectionFormatService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface CollectionFormatOperation {
    request: {
        query: {
            /**
             * This is an array parameter that is sent as csv format (comma-separated values)
             */
            'parameterArrayCSV': string;
            /**
             * This is an array parameter that is sent as ssv format (space-separated values)
             */
            'parameterArraySSV': string;
            /**
             * This is an array parameter that is sent as tsv format (tab-separated values)
             */
            'parameterArrayTSV': string;
            /**
             * This is an array parameter that is sent as pipes format (pipe-separated values)
             */
            'parameterArrayPipes': string;
            /**
             * This is an array parameter that is sent as multi format (multiple parameter instances)
             */
            'parameterArrayMulti': string;
        };
    };

    response:;
}


"
`;

exports[`v2 should generate: ./test/generated/v2/operations/ComplexService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { ModelWithString } from '../models/ModelWithString';

/**
 */
export interface ComplexTypesOperation {
    request: {
        query: {
            /**
             * Parameter containing object
             */
            'parameterObject': any;
            /**
             * Parameter containing reference
             */
            'parameterReference': ModelWithString;
        };
    };

    response: | ModelWithString | any | any;
}


"
`;

exports[`v2 should generate: ./test/generated/v2/operations/DefaultService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface ServiceWithEmptyTagOperation {
    request: {
    };

    response:;
}


"
`;

exports[`v2 should generate: ./test/generated/v2/operations/DefaultsService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { ModelWithString } from '../models/ModelWithString';

/**
 */
export interface CallWithDefaultParametersOperation {
    request: {
        query: {
            /**
             * This is a simple string with default value
             */
            'parameterString': string;
            /**
             * This is a simple number with default value
             */
            'parameterNumber': number;
            /**
             * This is a simple boolean with default value
             */
            'parameterBoolean': boolean;
            /**
             * This is a simple enum with default value
             */
            'parameterEnum': string;
            /**
             * This is a simple model with default value
             */
            'parameterModel': ModelWithString;
        };
    };

    response:;
}

/**
 */
export interface CallWithDefaultOptionalParametersOperation {
    request: {
        query: {
            /**
             * This is a simple string that is optional with default value
             */
            'parameterString': string;
            /**
             * This is a simple number that is optional with default value
             */
            'parameterNumber': number;
            /**
             * This is a simple boolean that is optional with default value
             */
            'parameterBoolean': boolean;
            /**
             * This is a simple enum that is optional with default value
             */
            'parameterEnum': string;
            /**
             * This is a simple model that is optional with default value
             */
            'parameterModel': ModelWithString;
        };
    };

    response:;
}

/**
 */
export interface CallToTestOrderOfParamsOperation {
    request: {
        query: {
            /**
             * This is a optional string with default
             */
            'parameterOptionalStringWithDefault': string;
            /**
             * This is a optional string with empty default
             */
            'parameterOptionalStringWithEmptyDefault': string;
            /**
             * This is a optional string with no default
             */
            'parameterOptionalStringWithNoDefault': string;
            /**
             * This is a string with default
             */
            'parameterStringWithDefault': string;
            /**
             * This is a string with empty default
             */
            'parameterStringWithEmptyDefault': string;
            /**
             * This is a string with no default
             */
            'parameterStringWithNoDefault': string;
            /**
             * This is a string that can be null with no default
             */
            'parameterStringNullableWithNoDefault': string;
            /**
             * This is a string that can be null with default
             */
            'parameterStringNullableWithDefault': string;
        };
    };

    response:;
}


"
`;

exports[`v2 should generate: ./test/generated/v2/operations/DescriptionsService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface CallWithDescriptionsOperation {
    request: {
        query: {
            /**
             * Testing multiline comments in string: First line
             * Second line
             *
             * Fourth line
             */
            'parameterWithBreaks': string;
            /**
             * Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work
             */
            'parameterWithBackticks': string;
            /**
             * Testing slashes in string: \\\\backwards\\\\\\\\\\\\ and /forwards/// should work
             */
            'parameterWithSlashes': string;
            /**
             * Testing expression placeholders in string: \${expression} should work
             */
            'parameterWithExpressionPlaceholders': string;
            /**
             * Testing quotes in string: 'single quote''' and \\"double quotes\\"\\"\\" should work
             */
            'parameterWithQuotes': string;
            /**
             * Testing reserved characters in string: * inline * and ** inline ** should work
             */
            'parameterWithReservedCharacters': string;
        };
    };

    response:;
}


"
`;

exports[`v2 should generate: ./test/generated/v2/operations/DuplicateService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface DuplicateNameOperation {
    request: {
    };

    response:;
}

/**
 */
export interface DuplicateName1Operation {
    request: {
    };

    response:;
}

/**
 */
export interface DuplicateName2Operation {
    request: {
    };

    response:;
}

/**
 */
export interface DuplicateName3Operation {
    request: {
    };

    response:;
}


"
`;

exports[`v2 should generate: ./test/generated/v2/operations/ErrorService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface TestErrorCodeOperation {
    request: {
        query: {
            /**
             * Status code to return
             */
            'status': string;
        };
    };

    response: | any | any | any | any | any;
}


"
`;

exports[`v2 should generate: ./test/generated/v2/operations/HeaderService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface CallWithResultFromHeaderOperation {
    request: {
    };

    response: | string | any | any;
}


"
`;

exports[`v2 should generate: ./test/generated/v2/operations/MultipleTags1Service.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface DummyAOperation {
    request: {
    };

    response: | void;
}

/**
 */
export interface DummyBOperation {
    request: {
    };

    response: | void;
}


"
`;

exports[`v2 should generate: ./test/generated/v2/operations/MultipleTags2Service.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface DummyAOperation {
    request: {
    };

    response: | void;
}

/**
 */
export interface DummyBOperation {
    request: {
    };

    response: | void;
}


"
`;

exports[`v2 should generate: ./test/generated/v2/operations/MultipleTags3Service.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface DummyBOperation {
    request: {
    };

    response: | void;
}


"
`;

exports[`v2 should generate: ./test/generated/v2/operations/NoContentService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface CallWithNoContentResponseOperation {
    request: {
    };

    response: | void;
}


"
`;

exports[`v2 should generate: ./test/generated/v2/operations/ParametersService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface CallWithParametersOperation {
    request: {
        path: {
            /**
             * This is the parameter that goes into the path
             */
            'parameterPath': string;
        };
        headers: {
            /**
             * This is the parameter that goes into the header
             */
            'parameterHeader': string;
        };
        query: {
            /**
             * This is the parameter that goes into the query params
             */
            'parameterQuery': string;
        };
        formData: {
            /**
             * This is the parameter that goes into the form data
             */
            'parameterForm': string;
        };
        /**
         * This is the parameter that is sent as request body
         */
        body: string;
    };

    response:;
}

/**
 */
export interface CallWithWeirdParameterNamesOperation {
    request: {
        path: {
            /**
             * This is the parameter that goes into the path
             */
            'parameter.path.1': string;
            /**
             * This is the parameter that goes into the path
             */
            'parameter-path-2': string;
            /**
             * This is the parameter that goes into the path
             */
            'PARAMETER-PATH-3': string;
        };
        headers: {
            /**
             * This is the parameter that goes into the request header
             */
            'parameter.header': string;
        };
        query: {
            /**
             * This is the parameter with a reserved keyword
             */
            'default': string;
            /**
             * This is the parameter that goes into the request query params
             */
            'parameter-query': string;
        };
        formData: {
            /**
             * This is the parameter that goes into the request form data
             */
            'parameter_form': string;
        };
        /**
         * This is the parameter that is sent as request body
         */
        body: string;
    };

    response:;
}


"
`;

exports[`v2 should generate: ./test/generated/v2/operations/ResponseService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { ModelThatExtends } from '../models/ModelThatExtends';
import type { ModelThatExtendsExtends } from '../models/ModelThatExtendsExtends';
import type { ModelWithString } from '../models/ModelWithString';
import type { ModelWithString } from '../models/ModelWithString';

/**
 */
export interface CallWithResponseOperation {
    request: {
    };

    response: | ModelWithString;
}

/**
 */
export interface CallWithDuplicateResponsesOperation {
    request: {
    };

    response: | ModelWithString | ModelWithString | ModelWithString | ModelWithString;
}

/**
 */
export interface CallWithResponsesOperation {
    request: {
    };

    response: | any | ModelWithString | ModelThatExtends | ModelThatExtendsExtends | ModelWithString | ModelWithString | ModelWithString;
}


"
`;

exports[`v2 should generate: ./test/generated/v2/operations/SimpleService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface GetCallWithoutParametersAndResponseOperation {
    request: {
    };

    response:;
}

/**
 */
export interface PutCallWithoutParametersAndResponseOperation {
    request: {
    };

    response:;
}

/**
 */
export interface PostCallWithoutParametersAndResponseOperation {
    request: {
    };

    response:;
}

/**
 */
export interface DeleteCallWithoutParametersAndResponseOperation {
    request: {
    };

    response:;
}

/**
 */
export interface OptionsCallWithoutParametersAndResponseOperation {
    request: {
    };

    response:;
}

/**
 */
export interface HeadCallWithoutParametersAndResponseOperation {
    request: {
    };

    response:;
}

/**
 */
export interface PatchCallWithoutParametersAndResponseOperation {
    request: {
    };

    response:;
}


"
`;

exports[`v2 should generate: ./test/generated/v2/operations/TypesService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface TypesOperation {
    request: {
        path: {
            /**
             * This is a number parameter
             */
            'id': number;
        };
        query: {
            /**
             * This is a number parameter
             */
            'parameterNumber': number;
            /**
             * This is a string parameter
             */
            'parameterString': string;
            /**
             * This is a boolean parameter
             */
            'parameterBoolean': boolean;
            /**
             * This is an object parameter
             */
            'parameterObject': any;
            /**
             * This is an array parameter
             */
            'parameterArray': string;
            /**
             * This is a dictionary parameter
             */
            'parameterDictionary': string;
            /**
             * This is an enum parameter
             */
            'parameterEnum': string;
        };
    };

    response: | number | string | boolean | any;
}


"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ArrayWithArray.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ArrayWithArray = {
    type: 'array',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ArrayWithBooleans.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ArrayWithBooleans = {
    type: 'array',
    contains: {
        type: 'boolean',
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ArrayWithNumbers.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ArrayWithNumbers = {
    type: 'array',
    contains: {
        type: 'number',
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ArrayWithProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ArrayWithProperties = {
    type: 'array',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ArrayWithReferences.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ArrayWithReferences = {
    type: 'array',
    contains: {
        type: 'ModelWithString',
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ArrayWithStrings.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ArrayWithStrings = {
    type: 'array',
    contains: {
        type: 'string',
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$CommentWithBackticks.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CommentWithBackticks = {
    type: 'number',
    description: \`Testing backticks in string: \\\\\`backticks\\\\\` and \\\\\`\\\\\`\\\\\`multiple backticks\\\\\`\\\\\`\\\\\` should work\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$CommentWithBreaks.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CommentWithBreaks = {
    type: 'number',
    description: \`Testing multiline comments in string: First line
    Second line

    Fourth line\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$CommentWithExpressionPlaceholders.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CommentWithExpressionPlaceholders = {
    type: 'number',
    description: \`Testing expression placeholders in string: \\\\\${expression} should work\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$CommentWithQuotes.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CommentWithQuotes = {
    type: 'number',
    description: \`Testing quotes in string: 'single quote''' and \\"double quotes\\"\\"\\" should work\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$CommentWithReservedCharacters.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CommentWithReservedCharacters = {
    type: 'number',
    description: \`Testing reserved characters in string: /* inline */ and /** inline **/ should work\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$CommentWithSlashes.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CommentWithSlashes = {
    type: 'number',
    description: \`Testing slashes in string: \\\\\\\\backwards\\\\\\\\\\\\\\\\\\\\\\\\ and /forwards/// should work\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$Date.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $Date = {
    type: 'string',
    description: \`This is a type-only model that defines Date as a string\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$DictionaryWithArray.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $DictionaryWithArray = {
    type: 'dictionary',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$DictionaryWithDictionary.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $DictionaryWithDictionary = {
    type: 'dictionary',
    contains: {
        type: 'dictionary',
        contains: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$DictionaryWithProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $DictionaryWithProperties = {
    type: 'dictionary',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$DictionaryWithReference.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $DictionaryWithReference = {
    type: 'dictionary',
    contains: {
        type: 'ModelWithString',
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$DictionaryWithString.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $DictionaryWithString = {
    type: 'dictionary',
    contains: {
        type: 'string',
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$EnumFromDescription.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $EnumFromDescription = {
    type: 'number',
    description: \`Success=1,Warning=2,Error=3\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$EnumWithExtensions.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $EnumWithExtensions = {
    type: 'Enum',
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$EnumWithNumbers.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $EnumWithNumbers = {
    type: 'Enum',
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$EnumWithStrings.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $EnumWithStrings = {
    type: 'Enum',
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelThatExtends.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelThatExtends = {
    type: 'all-of',
    description: \`This is a model that extends another model\`,
    contains: [{
        type: 'ModelWithString',
    }, {
        properties: {
            propExtendsA: {
                type: 'string',
            },
            propExtendsB: {
                type: 'ModelWithString',
            },
        },
    }],
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelThatExtendsExtends.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelThatExtendsExtends = {
    type: 'all-of',
    description: \`This is a model that extends another model\`,
    contains: [{
        type: 'ModelWithString',
    }, {
        type: 'ModelThatExtends',
    }, {
        properties: {
            propExtendsC: {
                type: 'string',
            },
            propExtendsD: {
                type: 'ModelWithString',
            },
        },
    }],
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithArray.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithArray = {
    description: \`This is a model with one property containing an array\`,
    properties: {
        prop: {
            type: 'array',
            contains: {
                type: 'ModelWithString',
            },
        },
        propWithFile: {
            type: 'array',
            contains: {
                type: 'binary',
            },
        },
        propWithNumber: {
            type: 'array',
            contains: {
                type: 'number',
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithBoolean.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithBoolean = {
    description: \`This is a model with one boolean property\`,
    properties: {
        prop: {
            type: 'boolean',
            description: \`This is a simple boolean property\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithCircularReference.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithCircularReference = {
    description: \`This is a model with one property containing a circular reference\`,
    properties: {
        prop: {
            type: 'ModelWithCircularReference',
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithDictionary.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithDictionary = {
    description: \`This is a model with one property containing a dictionary\`,
    properties: {
        prop: {
            type: 'dictionary',
            contains: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithDuplicateImports.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithDuplicateImports = {
    description: \`This is a model with duplicated imports\`,
    properties: {
        propA: {
            type: 'ModelWithString',
        },
        propB: {
            type: 'ModelWithString',
        },
        propC: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithDuplicateProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithDuplicateProperties = {
    description: \`This is a model with duplicated properties\`,
    properties: {
        prop: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithEnum.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithEnum = {
    description: \`This is a model with one enum\`,
    properties: {
        test: {
            type: 'Enum',
        },
        statusCode: {
            type: 'Enum',
        },
        bool: {
            type: 'boolean',
            description: \`Simple boolean enum\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithEnumFromDescription.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithEnumFromDescription = {
    description: \`This is a model with one enum\`,
    properties: {
        test: {
            type: 'number',
            description: \`Success=1,Warning=2,Error=3\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithInteger.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithInteger = {
    description: \`This is a model with one number property\`,
    properties: {
        prop: {
            type: 'number',
            description: \`This is a simple number property\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithNestedEnums.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithNestedEnums = {
    description: \`This is a model with nested enums\`,
    properties: {
        dictionaryWithEnum: {
            type: 'dictionary',
            contains: {
                type: 'Enum',
            },
        },
        dictionaryWithEnumFromDescription: {
            type: 'dictionary',
            contains: {
                type: 'number',
                description: \`Success=1,Warning=2,Error=3\`,
            },
        },
        arrayWithEnum: {
            type: 'array',
            contains: {
                type: 'Enum',
            },
        },
        arrayWithDescription: {
            type: 'array',
            contains: {
                type: 'number',
                description: \`Success=1,Warning=2,Error=3\`,
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithNestedProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithNestedProperties = {
    description: \`This is a model with one nested property\`,
    properties: {
        first: {
            properties: {
                second: {
                    properties: {
                        third: {
                            type: 'string',
                            isReadOnly: true,
                            isRequired: true,
                        },
                    },
                    isReadOnly: true,
                    isRequired: true,
                },
            },
            isReadOnly: true,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithNullableString.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithNullableString = {
    description: \`This is a model with one string property\`,
    properties: {
        nullableProp: {
            type: 'string',
            description: \`This is a simple string property\`,
            isNullable: true,
        },
        nullableRequiredProp: {
            type: 'string',
            description: \`This is a simple string property\`,
            isRequired: true,
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithOrderedProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithOrderedProperties = {
    description: \`This is a model with ordered properties\`,
    properties: {
        zebra: {
            type: 'string',
        },
        apple: {
            type: 'string',
        },
        hawaii: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithPattern.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithPattern = {
    description: \`This is a model that contains a some patterns\`,
    properties: {
        key: {
            type: 'string',
            isRequired: true,
            maxLength: 64,
            pattern: '^[a-zA-Z0-9_]*$',
        },
        name: {
            type: 'string',
            isRequired: true,
            maxLength: 255,
        },
        enabled: {
            type: 'boolean',
            isReadOnly: true,
        },
        modified: {
            type: 'string',
            isReadOnly: true,
            format: 'date-time',
        },
        id: {
            type: 'string',
            pattern: '^\\\\\\\\d{2}-\\\\\\\\d{3}-\\\\\\\\d{4}$',
        },
        text: {
            type: 'string',
            pattern: '^\\\\\\\\w+$',
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithProperties = {
    description: \`This is a model with one nested property\`,
    properties: {
        required: {
            type: 'string',
            isRequired: true,
        },
        requiredAndReadOnly: {
            type: 'string',
            isReadOnly: true,
            isRequired: true,
        },
        string: {
            type: 'string',
        },
        number: {
            type: 'number',
        },
        boolean: {
            type: 'boolean',
        },
        reference: {
            type: 'ModelWithString',
        },
        'property with space': {
            type: 'string',
        },
        default: {
            type: 'string',
        },
        try: {
            type: 'string',
        },
        '@namespace.string': {
            type: 'string',
            isReadOnly: true,
        },
        '@namespace.integer': {
            type: 'number',
            isReadOnly: true,
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithReference.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithReference = {
    description: \`This is a model with one property containing a reference\`,
    properties: {
        prop: {
            type: 'ModelWithProperties',
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithString.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithString = {
    description: \`This is a model with one string property\`,
    properties: {
        prop: {
            type: 'string',
            description: \`This is a simple string property\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$SimpleBoolean.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $SimpleBoolean = {
    type: 'boolean',
    description: \`This is a simple boolean\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$SimpleFile.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $SimpleFile = {
    type: 'binary',
    description: \`This is a simple file\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$SimpleInteger.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $SimpleInteger = {
    type: 'number',
    description: \`This is a simple number\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$SimpleReference.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $SimpleReference = {
    type: 'ModelWithString',
    description: \`This is a simple reference\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$SimpleString.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $SimpleString = {
    type: 'string',
    description: \`This is a simple string\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$SimpleStringWithPattern.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $SimpleStringWithPattern = {
    type: 'string',
    description: \`This is a simple string\`,
    maxLength: 64,
    pattern: '^[a-zA-Z0-9_]*$',
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/services/CollectionFormatService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type CollectionFormatOperation = 'CollectionFormat.collectionFormat';

const URLs: Record<CollectionFormatOperation, { method: ApiRequestMethod; url: string; operation: CollectionFormatOperation }> = {
    'CollectionFormat.collectionFormat': { method: 'GET', url: '/api/v{api-version}/collectionFormat', operation: 'CollectionFormat.collectionFormat' },
};

const KEY = 'CollectionFormat';

export class CollectionFormatService {
    declare [OperationsType]: CollectionFormatOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        collectionFormat(...params: [parameterArrayCsv?: Array<string>, parameterArraySsv?: Array<string>, parameterArrayTsv?: Array<string>, parameterArrayPipes?: Array<string>, parameterArrayMulti?: Array<string>]): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'collectionFormat', ...params];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param parameterArrayCsv This is an array parameter that is sent as csv format (comma-separated values)
     * @param parameterArraySsv This is an array parameter that is sent as ssv format (space-separated values)
     * @param parameterArrayTsv This is an array parameter that is sent as tsv format (tab-separated values)
     * @param parameterArrayPipes This is an array parameter that is sent as pipes format (pipe-separated values)
     * @param parameterArrayMulti This is an array parameter that is sent as multi format (multiple parameter instances)
     * @param options Request option overrides
     * @throws ApiError
     */
    public collectionFormat(
        parameterArrayCsv: Array<string>,
        parameterArraySsv: Array<string>,
        parameterArrayTsv: Array<string>,
        parameterArrayPipes: Array<string>,
        parameterArrayMulti: Array<string>,
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['CollectionFormat.collectionFormat'],
            query: {
                'parameterArrayCSV': parameterArrayCsv,
                'parameterArraySSV': parameterArraySsv,
                'parameterArrayTSV': parameterArrayTsv,
                'parameterArrayPipes': parameterArrayPipes,
                'parameterArrayMulti': parameterArrayMulti,
            },
            ...options,
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/ComplexService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ModelWithString } from '../models/ModelWithString';

import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type ComplexOperation = 'Complex.complexTypes';

const URLs: Record<ComplexOperation, { method: ApiRequestMethod; url: string; operation: ComplexOperation }> = {
    'Complex.complexTypes': { method: 'GET', url: '/api/v{api-version}/complex', operation: 'Complex.complexTypes' },
};

const KEY = 'Complex';

export class ComplexService {
    declare [OperationsType]: ComplexOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        complexTypes(...params: [parameterObject?: {
            first?: {
                second?: {
                    third?: string;
                };
            };
        }, parameterReference?: ModelWithString]): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'complex', ...params];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param parameterObject Parameter containing object
     * @param parameterReference Parameter containing reference
     * @param options Request option overrides
     * @returns ModelWithString Successful response
     * @throws ApiError
     */
    public complexTypes(
        parameterObject: {
            first?: {
                second?: {
                    third?: string;
                };
            };
        },
        parameterReference: ModelWithString,
        options?: Partial<ApiRequestOptions>,
    ): Promise<Array<ModelWithString>> {
        return __request(this.config, {
            ...URLs['Complex.complexTypes'],
            query: {
                'parameterObject': parameterObject,
                'parameterReference': parameterReference,
            },
            errors: {
                400: \`400 server error\`,
                500: \`500 server error\`,
            },
            ...options,
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/DefaultService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type DefaultOperation = 'Default.serviceWithEmptyTag';

const URLs: Record<DefaultOperation, { method: ApiRequestMethod; url: string; operation: DefaultOperation }> = {
    'Default.serviceWithEmptyTag': { method: 'GET', url: '/api/v{api-version}/no-tag', operation: 'Default.serviceWithEmptyTag' },
};

const KEY = 'Default';

export class DefaultService {
    declare [OperationsType]: DefaultOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        serviceWithEmptyTag(): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'no-tag', ];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public serviceWithEmptyTag(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Default.serviceWithEmptyTag'],
            ...options,
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/DefaultsService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ModelWithString } from '../models/ModelWithString';

import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type DefaultsOperation = 'Defaults.callWithDefaultParameters' | 'Defaults.callWithDefaultOptionalParameters' | 'Defaults.callToTestOrderOfParams';

const URLs: Record<DefaultsOperation, { method: ApiRequestMethod; url: string; operation: DefaultsOperation }> = {
    'Defaults.callWithDefaultParameters': { method: 'GET', url: '/api/v{api-version}/defaults', operation: 'Defaults.callWithDefaultParameters' },
    'Defaults.callWithDefaultOptionalParameters': { method: 'POST', url: '/api/v{api-version}/defaults', operation: 'Defaults.callWithDefaultOptionalParameters' },
    'Defaults.callToTestOrderOfParams': { method: 'PUT', url: '/api/v{api-version}/defaults', operation: 'Defaults.callToTestOrderOfParams' },
};

const KEY = 'Defaults';

export class DefaultsService {
    declare [OperationsType]: DefaultsOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        callWithDefaultParameters(...params: [parameterString?: string, parameterNumber?: number, parameterBoolean?: boolean, parameterEnum?: 'Success' | 'Warning' | 'Error', parameterModel?: ModelWithString]): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'defaults', ...params];
        },
        callWithDefaultOptionalParameters(...params: [parameterString?: string, parameterNumber?: number, parameterBoolean?: boolean, parameterEnum?: 'Success' | 'Warning' | 'Error', parameterModel?: ModelWithString]): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'defaults', ...params];
        },
        callToTestOrderOfParams(...params: [parameterStringWithNoDefault?: string, parameterOptionalStringWithDefault?: string, parameterOptionalStringWithEmptyDefault?: string, parameterOptionalStringWithNoDefault?: string, parameterStringWithDefault?: string, parameterStringWithEmptyDefault?: string, parameterStringNullableWithNoDefault?: string | null, parameterStringNullableWithDefault?: string | null]): readonly unknown[] {
            return [KEY, 'PUT', 'api', 'v{api-version}', 'defaults', ...params];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param parameterString This is a simple string with default value
     * @param parameterNumber This is a simple number with default value
     * @param parameterBoolean This is a simple boolean with default value
     * @param parameterEnum This is a simple enum with default value
     * @param parameterModel This is a simple model with default value
     * @param options Request option overrides
     * @throws ApiError
     */
    public callWithDefaultParameters(
        parameterString: string = 'Hello World!',
        parameterNumber: number = 123,
        parameterBoolean: boolean = true,
        parameterEnum: 'Success' | 'Warning' | 'Error' = 'Success',
        parameterModel: ModelWithString = {
            \\"prop\\": \\"Hello World!\\"
        },
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Defaults.callWithDefaultParameters'],
            query: {
                'parameterString': parameterString,
                'parameterNumber': parameterNumber,
                'parameterBoolean': parameterBoolean,
                'parameterEnum': parameterEnum,
                'parameterModel': parameterModel,
            },
            ...options,
        });
    }

    /**
     * @param parameterString This is a simple string that is optional with default value
     * @param parameterNumber This is a simple number that is optional with default value
     * @param parameterBoolean This is a simple boolean that is optional with default value
     * @param parameterEnum This is a simple enum that is optional with default value
     * @param parameterModel This is a simple model that is optional with default value
     * @param options Request option overrides
     * @throws ApiError
     */
    public callWithDefaultOptionalParameters(
        parameterString: string = 'Hello World!',
        parameterNumber: number = 123,
        parameterBoolean: boolean = true,
        parameterEnum: 'Success' | 'Warning' | 'Error' = 'Success',
        parameterModel: ModelWithString = {
            \\"prop\\": \\"Hello World!\\"
        },
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Defaults.callWithDefaultOptionalParameters'],
            query: {
                'parameterString': parameterString,
                'parameterNumber': parameterNumber,
                'parameterBoolean': parameterBoolean,
                'parameterEnum': parameterEnum,
                'parameterModel': parameterModel,
            },
            ...options,
        });
    }

    /**
     * @param parameterStringWithNoDefault This is a string with no default
     * @param parameterOptionalStringWithDefault This is a optional string with default
     * @param parameterOptionalStringWithEmptyDefault This is a optional string with empty default
     * @param parameterOptionalStringWithNoDefault This is a optional string with no default
     * @param parameterStringWithDefault This is a string with default
     * @param parameterStringWithEmptyDefault This is a string with empty default
     * @param parameterStringNullableWithNoDefault This is a string that can be null with no default
     * @param parameterStringNullableWithDefault This is a string that can be null with default
     * @param options Request option overrides
     * @throws ApiError
     */
    public callToTestOrderOfParams(
        parameterStringWithNoDefault: string,
        parameterOptionalStringWithDefault: string = 'Hello World!',
        parameterOptionalStringWithEmptyDefault: string = '',
        parameterOptionalStringWithNoDefault?: string,
        parameterStringWithDefault: string = 'Hello World!',
        parameterStringWithEmptyDefault: string = '',
        parameterStringNullableWithNoDefault?: string | null,
        parameterStringNullableWithDefault: string | null = null,
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Defaults.callToTestOrderOfParams'],
            query: {
                'parameterOptionalStringWithDefault': parameterOptionalStringWithDefault,
                'parameterOptionalStringWithEmptyDefault': parameterOptionalStringWithEmptyDefault,
                'parameterOptionalStringWithNoDefault': parameterOptionalStringWithNoDefault,
                'parameterStringWithDefault': parameterStringWithDefault,
                'parameterStringWithEmptyDefault': parameterStringWithEmptyDefault,
                'parameterStringWithNoDefault': parameterStringWithNoDefault,
                'parameterStringNullableWithNoDefault': parameterStringNullableWithNoDefault,
                'parameterStringNullableWithDefault': parameterStringNullableWithDefault,
            },
            ...options,
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/DescriptionsService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type DescriptionsOperation = 'Descriptions.callWithDescriptions';

const URLs: Record<DescriptionsOperation, { method: ApiRequestMethod; url: string; operation: DescriptionsOperation }> = {
    'Descriptions.callWithDescriptions': { method: 'POST', url: '/api/v{api-version}/descriptions/', operation: 'Descriptions.callWithDescriptions' },
};

const KEY = 'Descriptions';

export class DescriptionsService {
    declare [OperationsType]: DescriptionsOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        callWithDescriptions(...params: [parameterWithBreaks?: string, parameterWithBackticks?: string, parameterWithSlashes?: string, parameterWithExpressionPlaceholders?: string, parameterWithQuotes?: string, parameterWithReservedCharacters?: string]): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'descriptions', ...params];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param parameterWithBreaks Testing multiline comments in string: First line
     * Second line
     *
     * Fourth line
     * @param parameterWithBackticks Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work
     * @param parameterWithSlashes Testing slashes in string: \\\\backwards\\\\\\\\\\\\ and /forwards/// should work
     * @param parameterWithExpressionPlaceholders Testing expression placeholders in string: \${expression} should work
     * @param parameterWithQuotes Testing quotes in string: 'single quote''' and \\"double quotes\\"\\"\\" should work
     * @param parameterWithReservedCharacters Testing reserved characters in string: * inline * and ** inline ** should work
     * @param options Request option overrides
     * @throws ApiError
     */
    public callWithDescriptions(
        parameterWithBreaks?: string,
        parameterWithBackticks?: string,
        parameterWithSlashes?: string,
        parameterWithExpressionPlaceholders?: string,
        parameterWithQuotes?: string,
        parameterWithReservedCharacters?: string,
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Descriptions.callWithDescriptions'],
            query: {
                'parameterWithBreaks': parameterWithBreaks,
                'parameterWithBackticks': parameterWithBackticks,
                'parameterWithSlashes': parameterWithSlashes,
                'parameterWithExpressionPlaceholders': parameterWithExpressionPlaceholders,
                'parameterWithQuotes': parameterWithQuotes,
                'parameterWithReservedCharacters': parameterWithReservedCharacters,
            },
            ...options,
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/DuplicateService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type DuplicateOperation = 'Duplicate.duplicateName' | 'Duplicate.duplicateName1' | 'Duplicate.duplicateName2' | 'Duplicate.duplicateName3';

const URLs: Record<DuplicateOperation, { method: ApiRequestMethod; url: string; operation: DuplicateOperation }> = {
    'Duplicate.duplicateName': { method: 'GET', url: '/api/v{api-version}/duplicate', operation: 'Duplicate.duplicateName' },
    'Duplicate.duplicateName1': { method: 'POST', url: '/api/v{api-version}/duplicate', operation: 'Duplicate.duplicateName1' },
    'Duplicate.duplicateName2': { method: 'PUT', url: '/api/v{api-version}/duplicate', operation: 'Duplicate.duplicateName2' },
    'Duplicate.duplicateName3': { method: 'DELETE', url: '/api/v{api-version}/duplicate', operation: 'Duplicate.duplicateName3' },
};

const KEY = 'Duplicate';

export class DuplicateService {
    declare [OperationsType]: DuplicateOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        duplicateName(): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'duplicate', ];
        },
        duplicateName1(): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'duplicate', ];
        },
        duplicateName2(): readonly unknown[] {
            return [KEY, 'PUT', 'api', 'v{api-version}', 'duplicate', ];
        },
        duplicateName3(): readonly unknown[] {
            return [KEY, 'DELETE', 'api', 'v{api-version}', 'duplicate', ];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public duplicateName(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Duplicate.duplicateName'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public duplicateName1(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Duplicate.duplicateName1'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public duplicateName2(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Duplicate.duplicateName2'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public duplicateName3(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Duplicate.duplicateName3'],
            ...options,
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/ErrorService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type ErrorOperation = 'Error.testErrorCode';

const URLs: Record<ErrorOperation, { method: ApiRequestMethod; url: string; operation: ErrorOperation }> = {
    'Error.testErrorCode': { method: 'POST', url: '/api/v{api-version}/error', operation: 'Error.testErrorCode' },
};

const KEY = 'Error';

export class ErrorService {
    declare [OperationsType]: ErrorOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        testErrorCode(...params: [status?: string]): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'error', ...params];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param status Status code to return
     * @param options Request option overrides
     * @returns any Custom message: Successful response
     * @throws ApiError
     */
    public testErrorCode(
        status: string,
        options?: Partial<ApiRequestOptions>,
    ): Promise<any> {
        return __request(this.config, {
            ...URLs['Error.testErrorCode'],
            query: {
                'status': status,
            },
            errors: {
                500: \`Custom message: Internal Server Error\`,
                501: \`Custom message: Not Implemented\`,
                502: \`Custom message: Bad Gateway\`,
                503: \`Custom message: Service Unavailable\`,
            },
            ...options,
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/HeaderService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type HeaderOperation = 'Header.callWithResultFromHeader';

const URLs: Record<HeaderOperation, { method: ApiRequestMethod; url: string; operation: HeaderOperation }> = {
    'Header.callWithResultFromHeader': { method: 'POST', url: '/api/v{api-version}/header', operation: 'Header.callWithResultFromHeader' },
};

const KEY = 'Header';

export class HeaderService {
    declare [OperationsType]: HeaderOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        callWithResultFromHeader(): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'header', ];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param options Request option overrides
     * @returns string Successful response
     * @throws ApiError
     */
    public callWithResultFromHeader(
        options?: Partial<ApiRequestOptions>,
    ): Promise<string> {
        return __request(this.config, {
            ...URLs['Header.callWithResultFromHeader'],
            responseHeader: 'operation-location',
            errors: {
                400: \`400 server error\`,
                500: \`500 server error\`,
            },
            ...options,
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/MultipleTags1Service.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type MultipleTags1Operation = 'MultipleTags1.dummyA' | 'MultipleTags1.dummyB';

const URLs: Record<MultipleTags1Operation, { method: ApiRequestMethod; url: string; operation: MultipleTags1Operation }> = {
    'MultipleTags1.dummyA': { method: 'GET', url: '/api/v{api-version}/multiple-tags/a', operation: 'MultipleTags1.dummyA' },
    'MultipleTags1.dummyB': { method: 'GET', url: '/api/v{api-version}/multiple-tags/b', operation: 'MultipleTags1.dummyB' },
};

const KEY = 'MultipleTags1';

export class MultipleTags1Service {
    declare [OperationsType]: MultipleTags1Operation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        dummyA(): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'multiple-tags', 'a', ];
        },
        dummyB(): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'multiple-tags', 'b', ];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param options Request option overrides
     * @returns void
     * @throws ApiError
     */
    public dummyA(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['MultipleTags1.dummyA'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @returns void
     * @throws ApiError
     */
    public dummyB(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['MultipleTags1.dummyB'],
            ...options,
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/MultipleTags2Service.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type MultipleTags2Operation = 'MultipleTags2.dummyA' | 'MultipleTags2.dummyB';

const URLs: Record<MultipleTags2Operation, { method: ApiRequestMethod; url: string; operation: MultipleTags2Operation }> = {
    'MultipleTags2.dummyA': { method: 'GET', url: '/api/v{api-version}/multiple-tags/a', operation: 'MultipleTags2.dummyA' },
    'MultipleTags2.dummyB': { method: 'GET', url: '/api/v{api-version}/multiple-tags/b', operation: 'MultipleTags2.dummyB' },
};

const KEY = 'MultipleTags2';

export class MultipleTags2Service {
    declare [OperationsType]: MultipleTags2Operation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        dummyA(): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'multiple-tags', 'a', ];
        },
        dummyB(): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'multiple-tags', 'b', ];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param options Request option overrides
     * @returns void
     * @throws ApiError
     */
    public dummyA(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['MultipleTags2.dummyA'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @returns void
     * @throws ApiError
     */
    public dummyB(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['MultipleTags2.dummyB'],
            ...options,
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/MultipleTags3Service.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type MultipleTags3Operation = 'MultipleTags3.dummyB';

const URLs: Record<MultipleTags3Operation, { method: ApiRequestMethod; url: string; operation: MultipleTags3Operation }> = {
    'MultipleTags3.dummyB': { method: 'GET', url: '/api/v{api-version}/multiple-tags/b', operation: 'MultipleTags3.dummyB' },
};

const KEY = 'MultipleTags3';

export class MultipleTags3Service {
    declare [OperationsType]: MultipleTags3Operation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        dummyB(): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'multiple-tags', 'b', ];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param options Request option overrides
     * @returns void
     * @throws ApiError
     */
    public dummyB(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['MultipleTags3.dummyB'],
            ...options,
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/NoContentService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type NoContentOperation = 'NoContent.callWithNoContentResponse';

const URLs: Record<NoContentOperation, { method: ApiRequestMethod; url: string; operation: NoContentOperation }> = {
    'NoContent.callWithNoContentResponse': { method: 'GET', url: '/api/v{api-version}/no-content', operation: 'NoContent.callWithNoContentResponse' },
};

const KEY = 'NoContent';

export class NoContentService {
    declare [OperationsType]: NoContentOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        callWithNoContentResponse(): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'no-content', ];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param options Request option overrides
     * @returns void
     * @throws ApiError
     */
    public callWithNoContentResponse(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['NoContent.callWithNoContentResponse'],
            ...options,
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/ParametersService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type ParametersOperation = 'Parameters.callWithParameters' | 'Parameters.callWithWeirdParameterNames';

const URLs: Record<ParametersOperation, { method: ApiRequestMethod; url: string; operation: ParametersOperation }> = {
    'Parameters.callWithParameters': { method: 'POST', url: '/api/v{api-version}/parameters/{parameterPath}', operation: 'Parameters.callWithParameters' },
    'Parameters.callWithWeirdParameterNames': { method: 'POST', url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}', operation: 'Parameters.callWithWeirdParameterNames' },
};

const KEY = 'Parameters';

export class ParametersService {
    declare [OperationsType]: ParametersOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        callWithParameters(...params: [parameterHeader?: string, parameterQuery?: string, parameterForm?: string, parameterBody?: string, parameterPath?: string]): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'parameters', '{parameterPath}', ...params];
        },
        callWithWeirdParameterNames(...params: [parameterHeader?: string, parameterQuery?: string, parameterForm?: string, parameterBody?: string, parameterPath1?: string, parameterPath2?: string, parameterPath3?: string, _default?: string]): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'parameters', '{parameter.path.1}', '{parameter-path-2}', '{PARAMETER-PATH-3}', ...params];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param parameterHeader This is the parameter that goes into the header
     * @param parameterQuery This is the parameter that goes into the query params
     * @param parameterForm This is the parameter that goes into the form data
     * @param parameterBody This is the parameter that is sent as request body
     * @param parameterPath This is the parameter that goes into the path
     * @param options Request option overrides
     * @throws ApiError
     */
    public callWithParameters(
        parameterHeader: string,
        parameterQuery: string,
        parameterForm: string,
        parameterBody: string,
        parameterPath: string,
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Parameters.callWithParameters'],
            path: {
                'parameterPath': parameterPath,
            },
            headers: {
                'parameterHeader': parameterHeader,
            },
            query: {
                'parameterQuery': parameterQuery,
            },
            formData: {
                'parameterForm': parameterForm,
            },
            body: parameterBody,
            ...options,
        });
    }

    /**
     * @param parameterHeader This is the parameter that goes into the request header
     * @param parameterQuery This is the parameter that goes into the request query params
     * @param parameterForm This is the parameter that goes into the request form data
     * @param parameterBody This is the parameter that is sent as request body
     * @param parameterPath1 This is the parameter that goes into the path
     * @param parameterPath2 This is the parameter that goes into the path
     * @param parameterPath3 This is the parameter that goes into the path
     * @param _default This is the parameter with a reserved keyword
     * @param options Request option overrides
     * @throws ApiError
     */
    public callWithWeirdParameterNames(
        parameterHeader: string,
        parameterQuery: string,
        parameterForm: string,
        parameterBody: string,
        parameterPath1?: string,
        parameterPath2?: string,
        parameterPath3?: string,
        _default?: string,
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Parameters.callWithWeirdParameterNames'],
            path: {
                'parameter.path.1': parameterPath1,
                'parameter-path-2': parameterPath2,
                'PARAMETER-PATH-3': parameterPath3,
            },
            headers: {
                'parameter.header': parameterHeader,
            },
            query: {
                'default': _default,
                'parameter-query': parameterQuery,
            },
            formData: {
                'parameter_form': parameterForm,
            },
            body: parameterBody,
            ...options,
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/ResponseService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ModelThatExtends } from '../models/ModelThatExtends';
import type { ModelThatExtendsExtends } from '../models/ModelThatExtendsExtends';
import type { ModelWithString } from '../models/ModelWithString';

import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type ResponseOperation = 'Response.callWithResponse' | 'Response.callWithDuplicateResponses' | 'Response.callWithResponses';

const URLs: Record<ResponseOperation, { method: ApiRequestMethod; url: string; operation: ResponseOperation }> = {
    'Response.callWithResponse': { method: 'GET', url: '/api/v{api-version}/response', operation: 'Response.callWithResponse' },
    'Response.callWithDuplicateResponses': { method: 'POST', url: '/api/v{api-version}/response', operation: 'Response.callWithDuplicateResponses' },
    'Response.callWithResponses': { method: 'PUT', url: '/api/v{api-version}/response', operation: 'Response.callWithResponses' },
};

const KEY = 'Response';

export class ResponseService {
    declare [OperationsType]: ResponseOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        callWithResponse(): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'response', ];
        },
        callWithDuplicateResponses(): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'response', ];
        },
        callWithResponses(): readonly unknown[] {
            return [KEY, 'PUT', 'api', 'v{api-version}', 'response', ];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param options Request option overrides
     * @returns ModelWithString Message for default response
     * @throws ApiError
     */
    public callWithResponse(
        options?: Partial<ApiRequestOptions>,
    ): Promise<ModelWithString> {
        return __request(this.config, {
            ...URLs['Response.callWithResponse'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @returns ModelWithString Message for default response
     * @throws ApiError
     */
    public callWithDuplicateResponses(
        options?: Partial<ApiRequestOptions>,
    ): Promise<ModelWithString> {
        return __request(this.config, {
            ...URLs['Response.callWithDuplicateResponses'],
            errors: {
                500: \`Message for 500 error\`,
                501: \`Message for 501 error\`,
                502: \`Message for 502 error\`,
            },
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @returns any Message for 200 response
     * @returns ModelWithString Message for default response
     * @returns ModelThatExtends Message for 201 response
     * @returns ModelThatExtendsExtends Message for 202 response
     * @throws ApiError
     */
    public callWithResponses(
        options?: Partial<ApiRequestOptions>,
    ): Promise<{
        readonly '@namespace.string'?: string;
        readonly '@namespace.integer'?: number;
        readonly value?: Array<ModelWithString>;
    } | ModelWithString | ModelThatExtends | ModelThatExtendsExtends> {
        return __request(this.config, {
            ...URLs['Response.callWithResponses'],
            errors: {
                500: \`Message for 500 error\`,
                501: \`Message for 501 error\`,
                502: \`Message for 502 error\`,
            },
            ...options,
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/SimpleService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type SimpleOperation = 'Simple.getCallWithoutParametersAndResponse' | 'Simple.putCallWithoutParametersAndResponse' | 'Simple.postCallWithoutParametersAndResponse' | 'Simple.deleteCallWithoutParametersAndResponse' | 'Simple.optionsCallWithoutParametersAndResponse' | 'Simple.headCallWithoutParametersAndResponse' | 'Simple.patchCallWithoutParametersAndResponse';

const URLs: Record<SimpleOperation, { method: ApiRequestMethod; url: string; operation: SimpleOperation }> = {
    'Simple.getCallWithoutParametersAndResponse': { method: 'GET', url: '/api/v{api-version}/simple', operation: 'Simple.getCallWithoutParametersAndResponse' },
    'Simple.putCallWithoutParametersAndResponse': { method: 'PUT', url: '/api/v{api-version}/simple', operation: 'Simple.putCallWithoutParametersAndResponse' },
    'Simple.postCallWithoutParametersAndResponse': { method: 'POST', url: '/api/v{api-version}/simple', operation: 'Simple.postCallWithoutParametersAndResponse' },
    'Simple.deleteCallWithoutParametersAndResponse': { method: 'DELETE', url: '/api/v{api-version}/simple', operation: 'Simple.deleteCallWithoutParametersAndResponse' },
    'Simple.optionsCallWithoutParametersAndResponse': { method: 'OPTIONS', url: '/api/v{api-version}/simple', operation: 'Simple.optionsCallWithoutParametersAndResponse' },
    'Simple.headCallWithoutParametersAndResponse': { method: 'HEAD', url: '/api/v{api-version}/simple', operation: 'Simple.headCallWithoutParametersAndResponse' },
    'Simple.patchCallWithoutParametersAndResponse': { method: 'PATCH', url: '/api/v{api-version}/simple', operation: 'Simple.patchCallWithoutParametersAndResponse' },
};

const KEY = 'Simple';

export class SimpleService {
    declare [OperationsType]: SimpleOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        getCallWithoutParametersAndResponse(): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'simple', ];
        },
        putCallWithoutParametersAndResponse(): readonly unknown[] {
            return [KEY, 'PUT', 'api', 'v{api-version}', 'simple', ];
        },
        postCallWithoutParametersAndResponse(): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'simple', ];
        },
        deleteCallWithoutParametersAndResponse(): readonly unknown[] {
            return [KEY, 'DELETE', 'api', 'v{api-version}', 'simple', ];
        },
        optionsCallWithoutParametersAndResponse(): readonly unknown[] {
            return [KEY, 'OPTIONS', 'api', 'v{api-version}', 'simple', ];
        },
        headCallWithoutParametersAndResponse(): readonly unknown[] {
            return [KEY, 'HEAD', 'api', 'v{api-version}', 'simple', ];
        },
        patchCallWithoutParametersAndResponse(): readonly unknown[] {
            return [KEY, 'PATCH', 'api', 'v{api-version}', 'simple', ];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public getCallWithoutParametersAndResponse(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Simple.getCallWithoutParametersAndResponse'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public putCallWithoutParametersAndResponse(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Simple.putCallWithoutParametersAndResponse'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public postCallWithoutParametersAndResponse(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Simple.postCallWithoutParametersAndResponse'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public deleteCallWithoutParametersAndResponse(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Simple.deleteCallWithoutParametersAndResponse'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public optionsCallWithoutParametersAndResponse(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Simple.optionsCallWithoutParametersAndResponse'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public headCallWithoutParametersAndResponse(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Simple.headCallWithoutParametersAndResponse'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public patchCallWithoutParametersAndResponse(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Simple.patchCallWithoutParametersAndResponse'],
            ...options,
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/TypesService.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type TypesOperation = 'Types.types';

const URLs: Record<TypesOperation, { method: ApiRequestMethod; url: string; operation: TypesOperation }> = {
    'Types.types': { method: 'GET', url: '/api/v{api-version}/types', operation: 'Types.types' },
};

const KEY = 'Types';

export class TypesService {
    declare [OperationsType]: TypesOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        types(...params: [parameterArray?: Array<string>, parameterDictionary?: Record<string, string>, parameterEnum?: 'Success' | 'Warning' | 'Error', parameterNumber?: number, parameterString?: string, parameterBoolean?: boolean, parameterObject?: any, id?: number]): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'types', ...params];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param parameterArray This is an array parameter
     * @param parameterDictionary This is a dictionary parameter
     * @param parameterEnum This is an enum parameter
     * @param parameterNumber This is a number parameter
     * @param parameterString This is a string parameter
     * @param parameterBoolean This is a boolean parameter
     * @param parameterObject This is an object parameter
     * @param id This is a number parameter
     * @param options Request option overrides
     * @returns number Response is a simple number
     * @returns string Response is a simple string
     * @returns boolean Response is a simple boolean
     * @returns any Response is a simple object
     * @throws ApiError
     */
    public types(
        parameterArray: Array<string>,
        parameterDictionary: Record<string, string>,
        parameterEnum: 'Success' | 'Warning' | 'Error',
        parameterNumber: number = 123,
        parameterString: string = 'default',
        parameterBoolean: boolean = true,
        parameterObject: any = null,
        id?: number,
        options?: Partial<ApiRequestOptions>,
    ): Promise<number | string | boolean | any> {
        return __request(this.config, {
            ...URLs['Types.types'],
            path: {
                'id': id,
            },
            query: {
                'parameterNumber': parameterNumber,
                'parameterString': parameterString,
                'parameterBoolean': parameterBoolean,
                'parameterObject': parameterObject,
                'parameterArray': parameterArray,
                'parameterDictionary': parameterDictionary,
                'parameterEnum': parameterEnum,
            },
            ...options,
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/core/ApiError.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';

interface ErrorOptions {
    cause?: unknown;
    getErrorDetail?: (message: string, response: ApiResult) => ApiErrorDetail;
}

export interface ApiInnerError {
  code: string;
  [key: string]: string | undefined;
}

export interface ApiErrorDetail {
    /**
     * Error message returned by the API.
     *
     * Defaults to the original error message.
     */
    message: string;

    /**
     * Brief description of the error.
     */
    shortText: string;

    /**
     * More detailed description of the error.
     */
    longText?: string;

    /**
     * Error code returned by the API.
     */
    code?: string;

    /**
     * Identifier for the error.
     */
    id?: string;

    /**
     * The target of the error.
     */
    target?: string;
}

export class ApiError extends Error {
    public readonly url: string;
    public readonly status: number;
    public readonly statusText: string;
    public readonly body: any;
    public readonly request: ApiRequestOptions;
    public readonly operation: string;
    public readonly detail: ApiErrorDetail;
    public readonly code?: string;

    public static getInnerError(response: ApiResult): ApiInnerError | undefined {
        let innerError: ApiInnerError | undefined;
        if (typeof response.body === 'object' && response.body) {
            innerError = response.body?.error?.innererror || response.body?.error;
        }
        return innerError;
    }

    public static getApiErrorDetail(message: string, response: ApiResult): ApiErrorDetail {
        const innerError = ApiError.getInnerError(response);
        const detail: ApiErrorDetail = {
            code: innerError?.code,
            id: innerError?.id,
            message: innerError?.message ?? message,
            shortText: innerError?.shortText ?? response.statusText,
            longText: innerError?.longText,
            target: innerError?.target,
        };
        return detail;
    }

    public static isApiError(error: unknown): error is ApiError {
        return error instanceof Error && error.name === 'ApiError';
    }

    constructor(request: ApiRequestOptions, response: ApiResult, message: string, options?: ErrorOptions) {
        // @ts-ignore -- \\"options\\" only available in ES2022+
        super(message, { cause: options?.cause });

        // Maintains proper stack trace for where our error was thrown (only available on V8)
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, ApiError);
        }

        this.name = 'ApiError';
        this.url = response.url;
        this.status = response.status;
        this.statusText = response.statusText;
        this.body = response.body;
        this.request = request;
        this.operation = request.operation;

        const getErrorDetail = options?.getErrorDetail ?? ApiError.getApiErrorDetail;
        this.detail = getErrorDetail(message, response);
        this.code = this.detail.code;
    }

    public get isCancelled(): boolean {
        return false;
    }
}

export class CancelError extends Error {
    public readonly request: ApiRequestOptions;
    public readonly operation: string;
    public readonly detail: ApiErrorDetail;
    public readonly code?: string;

    public static isCancelError(error: unknown): error is ApiError {
        return error instanceof Error && error.name === 'CancelError';
    }

    constructor(request: ApiRequestOptions, message: string, options?: ErrorOptions) {
        // @ts-ignore -- \\"options\\" only available in ES2022+
        super(message, { cause: options?.cause });

        // Maintains proper stack trace for where our error was thrown (only available on V8)
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, CancelError);
        }

        this.name = 'CancelError';
        this.request = request;
        this.operation = request.operation;
        const getErrorDetail = options?.getErrorDetail ?? ApiError.getApiErrorDetail;
        this.detail = getErrorDetail(message, { url: request.url, status: 0, statusText: 'Cancelled', ok: false, body: undefined, cancelled: true });
        this.code = this.detail.code;
    }

    public get isCancelled(): boolean {
        return true;
    }
}
"
`;

exports[`v3 should generate: ./test/generated/v3/core/ApiRequestOptions.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { ApiResult } from './ApiResult';

export type ApiRequestMethod = 'GET' | 'PUT' | 'POST' | 'DELETE' | 'OPTIONS' | 'HEAD' | 'PATCH';

export interface ApiRequestOptions {
    readonly method: ApiRequestMethod;
    readonly operation: string;
    readonly url: string;
    readonly path?: Record<string, any>;
    readonly cookies?: Record<string, any>;
    readonly headers?: Record<string, any>;
    readonly query?: Record<string, any>;
    readonly formData?: Record<string, any>;
    readonly body?: any;
    readonly mediaType?: string;
    readonly responseHeader?: string;
    readonly errors?: Record<number, string>;
    readonly onDownloadProgress?: (event: ProgressEvent) => void;
    readonly onUploadProgress?: (event: ProgressEvent) => void;
    readonly signal?: AbortSignal;
    readonly errorHandler?: (
        options: ApiRequestOptions,
        result: ApiResult,
        message: string,
    ) => void;
}
"
`;

exports[`v3 should generate: ./test/generated/v3/core/ApiResult.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export interface ApiResult {
    readonly url: string;
    readonly ok: boolean;
    readonly status: number;
    readonly statusText: string;
    readonly body: any;
    readonly cancelled?: boolean;
}
"
`;

exports[`v3 should generate: ./test/generated/v3/core/OpenAPI.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { ApiErrorDetail } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';

type Resolver<T> = (options: ApiRequestOptions) => Promise<T>;
type Headers = Record<string, string>;

export interface OpenAPIConfig {
    apiVersion: string;
    baseUrl: string;
    withCredentials: boolean;
    credentials: 'include' | 'omit' | 'same-origin';
    token?: string | Resolver<string>;
    username?: string | Resolver<string>;
    password?: string | Resolver<string>;
    headers?: Headers | Resolver<Headers>;
    encodePath?: (path: string) => string;
    getErrorDetail?: (message: string, response: ApiResult) => ApiErrorDetail;
}

export const OpenAPI: OpenAPIConfig = {
    apiVersion: '1.0',
    baseUrl: 'http://localhost:3000/base',
    withCredentials: false,
    credentials: 'include',
};
"
`;

exports[`v3 should generate: ./test/generated/v3/core/functions.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import { ApiError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import type { OpenAPIConfig } from './OpenAPI';

export const base64 = (str: string): string => {
    try {
        return btoa(str);
    } catch (err) {
        // @ts-ignore
        return Buffer.from(str).toString('base64');
    }
};

export const catchErrorCodes = (config: OpenAPIConfig, options: ApiRequestOptions, result: ApiResult): void => {
    const errors: Record<number, string> = {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Internal Server Error',
        502: 'Bad Gateway',
        503: 'Service Unavailable',
        ...options.errors,
    };

    const error = errors[result.status];
    if (options.errorHandler && !result.ok) {
        options.errorHandler(options, result, error ?? 'Generic Error');
    }
    if (error) {
        throw new ApiError(options, result, error, { getErrorDetail: config.getErrorDetail });
    }
    if (!result.ok) {
        throw new ApiError(options, result, 'Generic Error', { getErrorDetail: config.getErrorDetail });
    }
};

export const getFormData = (options: ApiRequestOptions): FormData | undefined => {
    if (options.formData) {
        const formData = new FormData();

        const process = (key: string, value: any) => {
            if (isString(value) || isBlob(value)) {
                formData.append(key, value);
            } else {
                formData.append(key, JSON.stringify(value));
            }
        };

        Object.entries(options.formData)
            .filter(([_, value]) => isDefined(value))
            .forEach(([key, value]) => {
                if (Array.isArray(value)) {
                    value.forEach(v => process(key, v));
                } else {
                    process(key, value);
                }
            });

        return formData;
    }
    return undefined;
};

export const getHeaders = async (config: OpenAPIConfig, options: ApiRequestOptions): Promise<Headers> => {
    const token = await resolve(options, config.token);
    const username = await resolve(options, config.username);
    const password = await resolve(options, config.password);
    const additionalHeaders = await resolve(options, config.headers);

    const headers = Object.entries({
        Accept: 'application/json',
        ...additionalHeaders,
        ...options.headers,
    })
        .filter(([_, value]) => isDefined(value))
        .reduce(
            (headers, [key, value]) => ({
                ...headers,
                [key]: String(value),
            }),
            {} as Record<string, string>
        );

    if (isStringWithValue(token)) {
        headers['Authorization'] = \`Bearer \${token}\`;
    }

    if (isStringWithValue(username) && isStringWithValue(password)) {
        const credentials = base64(\`\${username}:\${password}\`);
        headers['Authorization'] = \`Basic \${credentials}\`;
    }

    if (options.body) {
        if (options.mediaType) {
            headers['Content-Type'] = options.mediaType;
        } else if (isBlob(options.body)) {
            headers['Content-Type'] = options.body.type || 'application/octet-stream';
        } else if (isString(options.body)) {
            headers['Content-Type'] = 'text/plain';
        } else if (!isFormData(options.body)) {
            headers['Content-Type'] = 'application/json';
        }
    }

    return new Headers(headers);
};

export const getRequestBody = (options: ApiRequestOptions): any => {
    if (options.body !== undefined) {
        if (options.mediaType?.includes('/json')) {
            return JSON.stringify(options.body);
        } else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {
            return options.body;
        } else {
            return JSON.stringify(options.body);
        }
    }
    return undefined;
};

export const getQueryString = (params: Record<string, any>): string => {
    const qs: string[] = [];

    const append = (key: string, value: any) => {
        qs.push(\`\${encodeURIComponent(key)}=\${encodeURIComponent(String(value))}\`);
    };

    const process = (key: string, value: any) => {
        if (isDefined(value)) {
            if (Array.isArray(value)) {
                value.forEach(v => {
                    process(key, v);
                });
            } else if (typeof value === 'object') {
                Object.entries(value).forEach(([k, v]) => {
                    process(\`\${key}[\${k}]\`, v);
                });
            } else {
                append(key, value);
            }
        }
    };

    Object.entries(params).forEach(([key, value]) => {
        process(key, value);
    });

    if (qs.length > 0) {
        return \`?\${qs.join('&')}\`;
    }

    return '';
};

export const getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {
    const encoder = config.encodePath || encodeURI;

    const path = options.url
        .replace('{api-version}', config.apiVersion)
        .replace(/{(.*?)}/g, (substring: string, group: string) => {
            if (options.path?.hasOwnProperty(group)) {
                return encoder(String(options.path[group]));
            }
            return substring;
        });

    const url = \`\${config.baseUrl}\${path}\`;
    if (options.query) {
        return \`\${url}\${getQueryString(options.query)}\`;
    }
    return url;
};

export const isBlob = (value: any): value is Blob => {
    return (
        typeof value === 'object' &&
        typeof value.type === 'string' &&
        typeof value.stream === 'function' &&
        typeof value.arrayBuffer === 'function' &&
        typeof value.constructor === 'function' &&
        typeof value.constructor.name === 'string' &&
        /^(Blob|File)$/.test(value.constructor.name) &&
        /^(Blob|File)$/.test(value[Symbol.toStringTag])
    );
};

export const isDefined = <T>(value: T | null | undefined): value is Exclude<T, null | undefined> => {
    return value !== undefined && value !== null;
};

export const isFormData = (value: unknown): value is FormData => {
    return value instanceof FormData;
};

export const isString = (value: unknown): value is string => {
    return typeof value === 'string';
};

export const isStringWithValue = (value: unknown): value is string => {
    return isString(value) && value !== '';
};

export const isSuccess = (status: number): boolean => {
    return status >= 200 && status < 300;
};

type Resolver<T> = (options: ApiRequestOptions) => Promise<T>;

export const resolve = async <T>(options: ApiRequestOptions, resolver?: T | Resolver<T>): Promise<T | undefined> => {
    if (typeof resolver === 'function') {
        return (resolver as Resolver<T>)(options);
    }
    return resolver;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/core/request.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import { CancelError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { OpenAPIConfig } from './OpenAPI';
import { request as requestFetch } from './requestFetch';

/**
 * Request method
 * @param config The OpenAPI configuration object
 * @param options The request options from the service
 * @returns Promise<T>
 * @throws ApiError
 * @throws CancelError
 */
export const request = async <T>(config: OpenAPIConfig, options: ApiRequestOptions): Promise<T> => {
    try {
        let result: T;
        if (options.onDownloadProgress || options.onUploadProgress) {
            const { request: requestXhr } = await import('./requestXhr');
            result = await requestXhr(config, options);
        } else {
            result = await requestFetch(config, options);
        }
        return result;
    } catch (e) {
        let error = e;
        if (e instanceof Error && e.name === 'AbortError') {
            error = new CancelError(options, 'Request aborted', { cause: e, getErrorDetail: config.getErrorDetail });
        } else if (options.signal?.aborted && options.signal?.reason) {
            error = new CancelError(options, 'Request aborted', { cause: options.signal?.reason, getErrorDetail: config.getErrorDetail });
        }
        throw error;
    }
};
"
`;

exports[`v3 should generate: ./test/generated/v3/core/requestFetch.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import type { OpenAPIConfig } from './OpenAPI';
import { catchErrorCodes, getFormData, getHeaders, getRequestBody, getUrl, isString } from './functions';

const sendRequest = async (
    config: OpenAPIConfig,
    options: ApiRequestOptions,
    url: string,
    body: any,
    formData: FormData | undefined,
    headers: Headers
): Promise<Response> => {
    const request: RequestInit = {
        headers,
        body: body ?? formData,
        method: options.method,
        signal: options.signal,
    };

    if (config.withCredentials) {
        request.credentials = config.credentials;
    }

    return await fetch(url, request);
};

const getResponseBody = async (response: Response): Promise<any> => {
    if (response.status !== 204) {
        try {
            const contentType = response.headers.get('Content-Type');
            if (contentType) {
                const isJSON = contentType.toLowerCase().startsWith('application/json');
                if (isJSON) {
                    return await response.json();
                } else {
                    return await response.text();
                }
            }
        } catch (error) {
            console.error(error);
        }
    }
    return undefined;
};

const getResponseHeader = (response: Response, responseHeader?: string): string | undefined => {
    if (responseHeader) {
        const content = response.headers.get(responseHeader);
        if (isString(content)) {
            return content;
        }
    }
    return undefined;
};

/**
 * Request method
 * @param config The OpenAPI configuration object
 * @param options The request options from the service
 * @returns Promise<T>
 * @throws ApiError
 */
export const request = async <T>(config: OpenAPIConfig, options: ApiRequestOptions): Promise<T> => {
    const url = getUrl(config, options);
    const formData = getFormData(options);
    const body = getRequestBody(options);
    const headers = await getHeaders(config, options);

    options.signal?.throwIfAborted();

    const response = await sendRequest(config, options, url, body, formData, headers);
    const responseBody = await getResponseBody(response);
    const responseHeader = getResponseHeader(response, options.responseHeader);

    const result: ApiResult = {
        url,
        ok: response.ok,
        status: response.status,
        statusText: response.statusText,
        body: responseHeader ?? responseBody,
    };

    catchErrorCodes(config, options, result);

    return result.body;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/core/requestXhr.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import type { OpenAPIConfig } from './OpenAPI';
import { getUrl, getFormData, getRequestBody, getHeaders, isSuccess, catchErrorCodes, isString } from './functions';

const getResponseBody = (xhr: XMLHttpRequest): any => {
    if (xhr.status !== 204) {
        try {
            const contentType = xhr.getResponseHeader('Content-Type');
            if (contentType) {
                const isJSON = contentType.toLowerCase().startsWith('application/json');
                if (isJSON) {
                    return JSON.parse(xhr.responseText);
                } else {
                    return xhr.responseText;
                }
            }
        } catch (error) {
            console.error(error);
        }
    }
    return undefined;
};

const getResponseHeader = (xhr: XMLHttpRequest, responseHeader?: string): string | undefined => {
    if (responseHeader) {
        const content = xhr.getResponseHeader(responseHeader);
        if (isString(content)) {
            return content;
        }
    }
    return undefined;
};

const sendRequest = async (
    config: OpenAPIConfig,
    options: ApiRequestOptions,
    url: string,
    body: any,
    formData: FormData | undefined,
    headers: Headers
): Promise<XMLHttpRequest> => {
    const xhr = new XMLHttpRequest();
    xhr.open(options.method, url, true);
    xhr.withCredentials = config.withCredentials;

    headers.forEach((value, key) => {
        xhr.setRequestHeader(key, value);
    });

    return new Promise<XMLHttpRequest>((resolve, reject) => {
        xhr.onload = () => resolve(xhr);
        xhr.onabort = () => reject(new Error('Request aborted'));
        xhr.onerror = () => reject(new Error('Network error'));
        if (options.onDownloadProgress) {
            xhr.onprogress = options.onDownloadProgress;
        }
        if (options.onUploadProgress) {
            xhr.upload.onprogress = options.onUploadProgress;
        }
        if (options.signal) {
            options.signal.addEventListener('abort', () => xhr.abort());
        }
        xhr.send(body ?? formData);
    });
};

/**
 * Request method
 * @param config The OpenAPI configuration object
 * @param options The request options from the service
 * @returns Promise<T>
 * @throws ApiError
 */
export const request = async <T>(config: OpenAPIConfig, options: ApiRequestOptions): Promise<T> => {
    const url = getUrl(config, options);
    const formData = getFormData(options);
    const body = getRequestBody(options);
    const headers = await getHeaders(config, options);

    options.signal?.throwIfAborted();

    const response = await sendRequest(config, options, url, body, formData, headers);
    const responseBody = getResponseBody(response);
    const responseHeader = getResponseHeader(response, options.responseHeader);

    const result: ApiResult = {
        url,
        ok: isSuccess(response.status),
        status: response.status,
        statusText: response.statusText,
        body: responseHeader ?? responseBody,
    };

    catchErrorCodes(config, options, result);

    return result.body;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/index.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export { ApiError } from './core/ApiError';
export { OpenAPI } from './core/OpenAPI';
export type { OpenAPIConfig } from './core/OpenAPI';

export type { OperationsType } from './models/_symbols';
export type { ArrayWithArray } from './models/ArrayWithArray';
export type { ArrayWithBooleans } from './models/ArrayWithBooleans';
export type { ArrayWithNumbers } from './models/ArrayWithNumbers';
export type { ArrayWithProperties } from './models/ArrayWithProperties';
export type { ArrayWithReferences } from './models/ArrayWithReferences';
export type { ArrayWithStrings } from './models/ArrayWithStrings';
export type { CommentWithBackticks } from './models/CommentWithBackticks';
export type { CommentWithBreaks } from './models/CommentWithBreaks';
export type { CommentWithExpressionPlaceholders } from './models/CommentWithExpressionPlaceholders';
export type { CommentWithQuotes } from './models/CommentWithQuotes';
export type { CommentWithReservedCharacters } from './models/CommentWithReservedCharacters';
export type { CommentWithSlashes } from './models/CommentWithSlashes';
export type { CompositionBaseModel } from './models/CompositionBaseModel';
export type { CompositionExtendedModel } from './models/CompositionExtendedModel';
export type { CompositionWithAllOfAndNullable } from './models/CompositionWithAllOfAndNullable';
export type { CompositionWithAnyOf } from './models/CompositionWithAnyOf';
export type { CompositionWithAnyOfAndNullable } from './models/CompositionWithAnyOfAndNullable';
export type { CompositionWithAnyOfAnonymous } from './models/CompositionWithAnyOfAnonymous';
export type { CompositionWithOneOf } from './models/CompositionWithOneOf';
export type { CompositionWithOneOfAndComplexArrayDictionary } from './models/CompositionWithOneOfAndComplexArrayDictionary';
export type { CompositionWithOneOfAndNullable } from './models/CompositionWithOneOfAndNullable';
export type { CompositionWithOneOfAndSimpleArrayDictionary } from './models/CompositionWithOneOfAndSimpleArrayDictionary';
export type { CompositionWithOneOfAndSimpleDictionary } from './models/CompositionWithOneOfAndSimpleDictionary';
export type { CompositionWithOneOfAnonymous } from './models/CompositionWithOneOfAnonymous';
export type { CompositionWithOneOfDiscriminator } from './models/CompositionWithOneOfDiscriminator';
export type { DeprecatedModel } from './models/DeprecatedModel';
export type { DictionaryWithArray } from './models/DictionaryWithArray';
export type { DictionaryWithDictionary } from './models/DictionaryWithDictionary';
export type { DictionaryWithProperties } from './models/DictionaryWithProperties';
export type { DictionaryWithReference } from './models/DictionaryWithReference';
export type { DictionaryWithString } from './models/DictionaryWithString';
export type { EnumFromDescription } from './models/EnumFromDescription';
export type { EnumWithExtensions } from './models/EnumWithExtensions';
export type { EnumWithNumbers } from './models/EnumWithNumbers';
export type { EnumWithStrings } from './models/EnumWithStrings';
export type { File } from './models/File';
export type { ModelCircle } from './models/ModelCircle';
export type { ModelSquare } from './models/ModelSquare';
export type { ModelThatExtends } from './models/ModelThatExtends';
export type { ModelThatExtendsExtends } from './models/ModelThatExtendsExtends';
export type { ModelWithArray } from './models/ModelWithArray';
export type { ModelWithBoolean } from './models/ModelWithBoolean';
export type { ModelWithCircularReference } from './models/ModelWithCircularReference';
export type { ModelWithDictionary } from './models/ModelWithDictionary';
export type { ModelWithDuplicateImports } from './models/ModelWithDuplicateImports';
export type { ModelWithDuplicateProperties } from './models/ModelWithDuplicateProperties';
export type { ModelWithEnum } from './models/ModelWithEnum';
export type { ModelWithEnumFromDescription } from './models/ModelWithEnumFromDescription';
export type { ModelWithInteger } from './models/ModelWithInteger';
export type { ModelWithNestedEnums } from './models/ModelWithNestedEnums';
export type { ModelWithNestedProperties } from './models/ModelWithNestedProperties';
export type { ModelWithNullableString } from './models/ModelWithNullableString';
export type { ModelWithOrderedProperties } from './models/ModelWithOrderedProperties';
export type { ModelWithPattern } from './models/ModelWithPattern';
export type { ModelWithProperties } from './models/ModelWithProperties';
export type { ModelWithReference } from './models/ModelWithReference';
export type { ModelWithString } from './models/ModelWithString';
export type { Pageable } from './models/Pageable';
export type { SimpleBoolean } from './models/SimpleBoolean';
export type { SimpleFile } from './models/SimpleFile';
export type { SimpleInteger } from './models/SimpleInteger';
export type { SimpleReference } from './models/SimpleReference';
export type { SimpleString } from './models/SimpleString';
export type { SimpleStringWithPattern } from './models/SimpleStringWithPattern';

export { $ArrayWithArray } from './schemas/$ArrayWithArray';
export { $ArrayWithBooleans } from './schemas/$ArrayWithBooleans';
export { $ArrayWithNumbers } from './schemas/$ArrayWithNumbers';
export { $ArrayWithProperties } from './schemas/$ArrayWithProperties';
export { $ArrayWithReferences } from './schemas/$ArrayWithReferences';
export { $ArrayWithStrings } from './schemas/$ArrayWithStrings';
export { $CommentWithBackticks } from './schemas/$CommentWithBackticks';
export { $CommentWithBreaks } from './schemas/$CommentWithBreaks';
export { $CommentWithExpressionPlaceholders } from './schemas/$CommentWithExpressionPlaceholders';
export { $CommentWithQuotes } from './schemas/$CommentWithQuotes';
export { $CommentWithReservedCharacters } from './schemas/$CommentWithReservedCharacters';
export { $CommentWithSlashes } from './schemas/$CommentWithSlashes';
export { $CompositionBaseModel } from './schemas/$CompositionBaseModel';
export { $CompositionExtendedModel } from './schemas/$CompositionExtendedModel';
export { $CompositionWithAllOfAndNullable } from './schemas/$CompositionWithAllOfAndNullable';
export { $CompositionWithAnyOf } from './schemas/$CompositionWithAnyOf';
export { $CompositionWithAnyOfAndNullable } from './schemas/$CompositionWithAnyOfAndNullable';
export { $CompositionWithAnyOfAnonymous } from './schemas/$CompositionWithAnyOfAnonymous';
export { $CompositionWithOneOf } from './schemas/$CompositionWithOneOf';
export { $CompositionWithOneOfAndComplexArrayDictionary } from './schemas/$CompositionWithOneOfAndComplexArrayDictionary';
export { $CompositionWithOneOfAndNullable } from './schemas/$CompositionWithOneOfAndNullable';
export { $CompositionWithOneOfAndSimpleArrayDictionary } from './schemas/$CompositionWithOneOfAndSimpleArrayDictionary';
export { $CompositionWithOneOfAndSimpleDictionary } from './schemas/$CompositionWithOneOfAndSimpleDictionary';
export { $CompositionWithOneOfAnonymous } from './schemas/$CompositionWithOneOfAnonymous';
export { $CompositionWithOneOfDiscriminator } from './schemas/$CompositionWithOneOfDiscriminator';
export { $DeprecatedModel } from './schemas/$DeprecatedModel';
export { $DictionaryWithArray } from './schemas/$DictionaryWithArray';
export { $DictionaryWithDictionary } from './schemas/$DictionaryWithDictionary';
export { $DictionaryWithProperties } from './schemas/$DictionaryWithProperties';
export { $DictionaryWithReference } from './schemas/$DictionaryWithReference';
export { $DictionaryWithString } from './schemas/$DictionaryWithString';
export { $EnumFromDescription } from './schemas/$EnumFromDescription';
export { $EnumWithExtensions } from './schemas/$EnumWithExtensions';
export { $EnumWithNumbers } from './schemas/$EnumWithNumbers';
export { $EnumWithStrings } from './schemas/$EnumWithStrings';
export { $File } from './schemas/$File';
export { $ModelCircle } from './schemas/$ModelCircle';
export { $ModelSquare } from './schemas/$ModelSquare';
export { $ModelThatExtends } from './schemas/$ModelThatExtends';
export { $ModelThatExtendsExtends } from './schemas/$ModelThatExtendsExtends';
export { $ModelWithArray } from './schemas/$ModelWithArray';
export { $ModelWithBoolean } from './schemas/$ModelWithBoolean';
export { $ModelWithCircularReference } from './schemas/$ModelWithCircularReference';
export { $ModelWithDictionary } from './schemas/$ModelWithDictionary';
export { $ModelWithDuplicateImports } from './schemas/$ModelWithDuplicateImports';
export { $ModelWithDuplicateProperties } from './schemas/$ModelWithDuplicateProperties';
export { $ModelWithEnum } from './schemas/$ModelWithEnum';
export { $ModelWithEnumFromDescription } from './schemas/$ModelWithEnumFromDescription';
export { $ModelWithInteger } from './schemas/$ModelWithInteger';
export { $ModelWithNestedEnums } from './schemas/$ModelWithNestedEnums';
export { $ModelWithNestedProperties } from './schemas/$ModelWithNestedProperties';
export { $ModelWithNullableString } from './schemas/$ModelWithNullableString';
export { $ModelWithOrderedProperties } from './schemas/$ModelWithOrderedProperties';
export { $ModelWithPattern } from './schemas/$ModelWithPattern';
export { $ModelWithProperties } from './schemas/$ModelWithProperties';
export { $ModelWithReference } from './schemas/$ModelWithReference';
export { $ModelWithString } from './schemas/$ModelWithString';
export { $Pageable } from './schemas/$Pageable';
export { $SimpleBoolean } from './schemas/$SimpleBoolean';
export { $SimpleFile } from './schemas/$SimpleFile';
export { $SimpleInteger } from './schemas/$SimpleInteger';
export { $SimpleReference } from './schemas/$SimpleReference';
export { $SimpleString } from './schemas/$SimpleString';
export { $SimpleStringWithPattern } from './schemas/$SimpleStringWithPattern';

export * from './services/CollectionFormatSvc';
export * from './services/ComplexSvc';
export * from './services/DefaultSvc';
export * from './services/DefaultsSvc';
export * from './services/DeprecatedSvc';
export * from './services/DescriptionsSvc';
export * from './services/DuplicateSvc';
export * from './services/ErrorSvc';
export * from './services/FormDataSvc';
export * from './services/HeaderSvc';
export * from './services/MultipartSvc';
export * from './services/MultipleTags1Svc';
export * from './services/MultipleTags2Svc';
export * from './services/MultipleTags3Svc';
export * from './services/NoContentSvc';
export * from './services/ParametersSvc';
export * from './services/RequestBodySvc';
export * from './services/ResponseSvc';
export * from './services/SimpleSvc';
export * from './services/TypesSvc';
export * from './services/UploadSvc';

export type { CollectionFormatOperation } from './operations/CollectionFormatSvc';
export type { ComplexTypesOperation } from './operations/ComplexSvc';
export type { ComplexParamsOperation } from './operations/ComplexSvc';
export type { ServiceWithEmptyTagOperation } from './operations/DefaultSvc';
export type { CallWithDefaultParametersOperation } from './operations/DefaultsSvc';
export type { CallWithDefaultOptionalParametersOperation } from './operations/DefaultsSvc';
export type { CallToTestOrderOfParamsOperation } from './operations/DefaultsSvc';
export type { DeprecatedCallOperation } from './operations/DeprecatedSvc';
export type { CallWithDescriptionsOperation } from './operations/DescriptionsSvc';
export type { DuplicateNameOperation } from './operations/DuplicateSvc';
export type { DuplicateName1Operation } from './operations/DuplicateSvc';
export type { DuplicateName2Operation } from './operations/DuplicateSvc';
export type { DuplicateName3Operation } from './operations/DuplicateSvc';
export type { TestErrorCodeOperation } from './operations/ErrorSvc';
export type { PostApiFormDataOperation } from './operations/FormDataSvc';
export type { CallWithResultFromHeaderOperation } from './operations/HeaderSvc';
export type { MultipartRequestOperation } from './operations/MultipartSvc';
export type { MultipartResponseOperation } from './operations/MultipartSvc';
export type { DummyAOperation } from './operations/MultipleTags1Svc';
export type { DummyBOperation } from './operations/MultipleTags1Svc';
export type { DummyAOperation } from './operations/MultipleTags2Svc';
export type { DummyBOperation } from './operations/MultipleTags2Svc';
export type { DummyBOperation } from './operations/MultipleTags3Svc';
export type { CallWithNoContentResponseOperation } from './operations/NoContentSvc';
export type { CallWithParametersOperation } from './operations/ParametersSvc';
export type { CallWithWeirdParameterNamesOperation } from './operations/ParametersSvc';
export type { GetCallWithOptionalParamOperation } from './operations/ParametersSvc';
export type { PostCallWithOptionalParamOperation } from './operations/ParametersSvc';
export type { PostApiRequestBodyOperation } from './operations/RequestBodySvc';
export type { CallWithResponseOperation } from './operations/ResponseSvc';
export type { CallWithDuplicateResponsesOperation } from './operations/ResponseSvc';
export type { CallWithResponsesOperation } from './operations/ResponseSvc';
export type { GetCallWithoutParametersAndResponseOperation } from './operations/SimpleSvc';
export type { PutCallWithoutParametersAndResponseOperation } from './operations/SimpleSvc';
export type { PostCallWithoutParametersAndResponseOperation } from './operations/SimpleSvc';
export type { DeleteCallWithoutParametersAndResponseOperation } from './operations/SimpleSvc';
export type { OptionsCallWithoutParametersAndResponseOperation } from './operations/SimpleSvc';
export type { HeadCallWithoutParametersAndResponseOperation } from './operations/SimpleSvc';
export type { PatchCallWithoutParametersAndResponseOperation } from './operations/SimpleSvc';
export type { TypesOperation } from './operations/TypesSvc';
export type { UploadFileOperation } from './operations/UploadSvc';
"
`;

exports[`v3 should generate: ./test/generated/v3/models/_symbols.ts 1`] = `
"export declare const OperationsType: unique symbol;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ArrayWithArray.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a simple array containing an array
 */
export type ArrayWithArray = Array<Array<ModelWithString>>;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ArrayWithBooleans.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple array with booleans
 */
export type ArrayWithBooleans = Array<boolean>;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ArrayWithNumbers.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple array with numbers
 */
export type ArrayWithNumbers = Array<number>;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ArrayWithProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple array with properties
 */
export type ArrayWithProperties = Array<{
    foo?: string;
    bar?: string;
}>;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ArrayWithReferences.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a simple array with references
 */
export type ArrayWithReferences = Array<ModelWithString>;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ArrayWithStrings.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple array with strings
 */
export type ArrayWithStrings = Array<string>;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CommentWithBackticks.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work
 */
export type CommentWithBackticks = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CommentWithBreaks.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export type CommentWithBreaks = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CommentWithExpressionPlaceholders.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * Testing expression placeholders in string: \${expression} should work
 */
export type CommentWithExpressionPlaceholders = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CommentWithQuotes.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * Testing quotes in string: 'single quote''' and \\"double quotes\\"\\"\\" should work
 */
export type CommentWithQuotes = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CommentWithReservedCharacters.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * Testing reserved characters in string: * inline * and ** inline ** should work
 */
export type CommentWithReservedCharacters = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CommentWithSlashes.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * Testing slashes in string: \\\\backwards\\\\\\\\\\\\ and /forwards/// should work
 */
export type CommentWithSlashes = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionBaseModel.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a base model with two simple optional properties
 */
export type CompositionBaseModel = {
    firstName?: string;
    lastname?: string;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionExtendedModel.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { CompositionBaseModel } from './CompositionBaseModel';

/**
 * This is a model that extends the base model
 */
export type CompositionExtendedModel = (CompositionBaseModel & {
    firstName: string;
    lastname: string;
    age: number;
});

"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithAllOfAndNullable.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';

/**
 * This is a model with one property with a 'all of' relationship
 */
export type CompositionWithAllOfAndNullable = {
    propA?: ({
        boolean?: boolean;
    } & ModelWithEnum & ModelWithArray & ModelWithDictionary) | null;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithAnyOf.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';
import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with one property with a 'any of' relationship
 */
export type CompositionWithAnyOf = {
    propA?: (ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary);
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithAnyOfAndNullable.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';

/**
 * This is a model with one property with a 'any of' relationship
 */
export type CompositionWithAnyOfAndNullable = {
    propA?: ({
        boolean?: boolean;
    } | ModelWithEnum | ModelWithArray | ModelWithDictionary) | null;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithAnyOfAnonymous.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with one property with a 'any of' relationship where the options are not $ref
 */
export type CompositionWithAnyOfAnonymous = {
    propA?: ({
        propA?: string;
    } | string | number);
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithOneOf.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';
import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with one property with a 'one of' relationship
 */
export type CompositionWithOneOf = {
    propA?: (ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary);
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithOneOfAndComplexArrayDictionary.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model that contains a dictionary of complex arrays (composited) within composition
 */
export type CompositionWithOneOfAndComplexArrayDictionary = {
    propA?: (boolean | Record<string, Array<(number | string)>>);
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithOneOfAndNullable.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';

/**
 * This is a model with one property with a 'one of' relationship
 */
export type CompositionWithOneOfAndNullable = {
    propA?: ({
        boolean?: boolean;
    } | ModelWithEnum | ModelWithArray | ModelWithDictionary) | null;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithOneOfAndSimpleArrayDictionary.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model that contains a dictionary of simple arrays within composition
 */
export type CompositionWithOneOfAndSimpleArrayDictionary = {
    propA?: (boolean | Record<string, Array<boolean>>);
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithOneOfAndSimpleDictionary.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model that contains a simple dictionary within composition
 */
export type CompositionWithOneOfAndSimpleDictionary = {
    propA?: (boolean | Record<string, number>);
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithOneOfAnonymous.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with one property with a 'one of' relationship where the options are not $ref
 */
export type CompositionWithOneOfAnonymous = {
    propA?: ({
        propA?: string;
    } | string | number);
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithOneOfDiscriminator.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelCircle } from './ModelCircle';
import type { ModelSquare } from './ModelSquare';

/**
 * This is a model with one property with a 'one of' relationship where the options are not $ref
 */
export type CompositionWithOneOfDiscriminator = (ModelCircle | ModelSquare);

"
`;

exports[`v3 should generate: ./test/generated/v3/models/DeprecatedModel.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a deprecated model with a deprecated property
 * @deprecated
 */
export type DeprecatedModel = {
    /**
     * This is a deprecated property
     * @deprecated
     */
    prop?: string;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/DictionaryWithArray.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a complex dictionary
 */
export type DictionaryWithArray = Record<string, Array<ModelWithString>>;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/DictionaryWithDictionary.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a string dictionary
 */
export type DictionaryWithDictionary = Record<string, Record<string, string>>;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/DictionaryWithProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a complex dictionary
 */
export type DictionaryWithProperties = Record<string, {
    foo?: string;
    bar?: string;
}>;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/DictionaryWithReference.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a string reference
 */
export type DictionaryWithReference = Record<string, ModelWithString>;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/DictionaryWithString.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a string dictionary
 */
export type DictionaryWithString = Record<string, string>;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/EnumFromDescription.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * Success=1,Warning=2,Error=3
 */
export type EnumFromDescription = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/EnumWithExtensions.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple enum with numbers
 */
export type EnumWithExtensions = 200 | 400 | 500;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/EnumWithNumbers.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple enum with numbers
 */
export type EnumWithNumbers = 1 | 2 | 3 | 1.1 | 1.2 | 1.3 | 100 | 200 | 300 | -100 | -200 | -300 | -1.1 | -1.2 | -1.3;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/EnumWithStrings.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple enum with strings
 */
export type EnumWithStrings = 'Success' | 'Warning' | 'Error' | '\\\\'Single Quote\\\\'' | '\\"Double Quotes\\"';
"
`;

exports[`v3 should generate: ./test/generated/v3/models/File.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

export type File = {
    readonly id?: string;
    readonly updated_at?: string;
    readonly created_at?: string;
    mime: string;
    readonly file?: string;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelCircle.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * Circle
 */
export type ModelCircle = {
    kind: 'circle';
    radius?: number;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelSquare.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * Square
 */
export type ModelSquare = {
    kind: 'square';
    sideLength?: number;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelThatExtends.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model that extends another model
 */
export type ModelThatExtends = (ModelWithString & {
    propExtendsA?: string;
    propExtendsB?: ModelWithString;
});

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelThatExtendsExtends.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelThatExtends } from './ModelThatExtends';
import type { ModelWithString } from './ModelWithString';

/**
 * This is a model that extends another model
 */
export type ModelThatExtendsExtends = (ModelWithString & ModelThatExtends & {
    propExtendsC?: string;
    propExtendsD?: ModelWithString;
});

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithArray.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with one property containing an array
 */
export type ModelWithArray = {
    prop?: Array<ModelWithString>;
    propWithFile?: Array<Blob>;
    propWithNumber?: Array<number>;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithBoolean.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with one boolean property
 */
export type ModelWithBoolean = {
    /**
     * This is a simple boolean property
     */
    prop?: boolean;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithCircularReference.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with one property containing a circular reference
 */
export type ModelWithCircularReference = {
    prop?: ModelWithCircularReference;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithDictionary.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with one property containing a dictionary
 */
export type ModelWithDictionary = {
    prop?: Record<string, string>;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithDuplicateImports.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with duplicated imports
 */
export type ModelWithDuplicateImports = {
    propA?: ModelWithString;
    propB?: ModelWithString;
    propC?: ModelWithString;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithDuplicateProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with duplicated properties
 */
export type ModelWithDuplicateProperties = {
    prop?: ModelWithString;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithEnum.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with one enum
 */
export type ModelWithEnum = {
    /**
     * This is a simple enum with strings
     */
    test?: 'Success' | 'Warning' | 'Error';
    /**
     * These are the HTTP error code enums
     */
    statusCode?: '100' | '200 FOO' | '300 FOO_BAR' | '400 foo-bar' | '500 foo.bar' | '600 foo&bar';
    /**
     * Simple boolean enum
     */
    bool?: boolean;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithEnumFromDescription.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with one enum
 */
export type ModelWithEnumFromDescription = {
    /**
     * Success=1,Warning=2,Error=3
     */
    test?: number;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithInteger.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with one number property
 */
export type ModelWithInteger = {
    /**
     * This is a simple number property
     */
    prop?: number;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithNestedEnums.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with nested enums
 */
export type ModelWithNestedEnums = {
    dictionaryWithEnum?: Record<string, 'Success' | 'Warning' | 'Error'>;
    dictionaryWithEnumFromDescription?: Record<string, number>;
    arrayWithEnum?: Array<'Success' | 'Warning' | 'Error'>;
    arrayWithDescription?: Array<number>;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithNestedProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with one nested property
 */
export type ModelWithNestedProperties = {
    readonly first: {
        readonly second: {
            readonly third: string | null;
        } | null;
    } | null;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithNullableString.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with one string property
 */
export type ModelWithNullableString = {
    /**
     * This is a simple string property
     */
    nullableProp1?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp1: string | null;
    /**
     * This is a simple string property
     */
    nullableProp2?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp2: string | null;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithOrderedProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with ordered properties
 */
export type ModelWithOrderedProperties = {
    zebra?: string;
    apple?: string;
    hawaii?: string;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithPattern.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model that contains a some patterns
 */
export type ModelWithPattern = {
    key: string;
    name: string;
    readonly enabled?: boolean;
    readonly modified?: string;
    id?: string;
    text?: string;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with one nested property
 */
export type ModelWithProperties = {
    required: string;
    readonly requiredAndReadOnly: string;
    requiredAndNullable: string | null;
    string?: string;
    number?: number;
    boolean?: boolean;
    reference?: ModelWithString;
    'property with space'?: string;
    default?: string;
    try?: string;
    readonly '@namespace.string'?: string;
    readonly '@namespace.integer'?: number;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithReference.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithProperties } from './ModelWithProperties';

/**
 * This is a model with one property containing a reference
 */
export type ModelWithReference = {
    prop?: ModelWithProperties;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithString.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a model with one string property
 */
export type ModelWithString = {
    /**
     * This is a simple string property
     */
    prop?: string;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/Pageable.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

export type Pageable = {
    page?: number;
    size?: number;
    sort?: Array<string>;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/models/SimpleBoolean.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple boolean
 */
export type SimpleBoolean = boolean;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/SimpleFile.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple file
 */
export type SimpleFile = Blob;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/SimpleInteger.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple number
 */
export type SimpleInteger = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/SimpleReference.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a simple reference
 */
export type SimpleReference = ModelWithString;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/SimpleString.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple string
 */
export type SimpleString = string;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/SimpleStringWithPattern.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */

/**
 * This is a simple string
 */
export type SimpleStringWithPattern = string | null;
"
`;

exports[`v3 should generate: ./test/generated/v3/operations/CollectionFormatSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface CollectionFormatOperation {
    request: {
        query: {
            /**
             * This is an array parameter that is sent as csv format (comma-separated values)
             */
            'parameterArrayCSV': string;
            /**
             * This is an array parameter that is sent as ssv format (space-separated values)
             */
            'parameterArraySSV': string;
            /**
             * This is an array parameter that is sent as tsv format (tab-separated values)
             */
            'parameterArrayTSV': string;
            /**
             * This is an array parameter that is sent as pipes format (pipe-separated values)
             */
            'parameterArrayPipes': string;
            /**
             * This is an array parameter that is sent as multi format (multiple parameter instances)
             */
            'parameterArrayMulti': string;
        };
    };

    response:;
}


"
`;

exports[`v3 should generate: ./test/generated/v3/operations/ComplexSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { ModelWithArray } from '../models/ModelWithArray';
import type { ModelWithDictionary } from '../models/ModelWithDictionary';
import type { ModelWithEnum } from '../models/ModelWithEnum';
import type { ModelWithString } from '../models/ModelWithString';

/**
 */
export interface ComplexTypesOperation {
    request: {
        query: {
            /**
             * Parameter containing object
             */
            'parameterObject': any;
            /**
             * Parameter containing reference
             */
            'parameterReference': ModelWithString;
        };
    };

    response: | ModelWithString | any | any;
}

/**
 */
export interface ComplexParamsOperation {
    request: {
        path: {
            'id': number;
        };
        body: any;
        mediaType: 'application/json-patch+json';
    };

    response: | ModelWithString;
}


"
`;

exports[`v3 should generate: ./test/generated/v3/operations/DefaultSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface ServiceWithEmptyTagOperation {
    request: {
    };

    response:;
}


"
`;

exports[`v3 should generate: ./test/generated/v3/operations/DefaultsSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { ModelWithString } from '../models/ModelWithString';

/**
 */
export interface CallWithDefaultParametersOperation {
    request: {
        query: {
            /**
             * This is a simple string with default value
             */
            'parameterString': string;
            /**
             * This is a simple number with default value
             */
            'parameterNumber': number;
            /**
             * This is a simple boolean with default value
             */
            'parameterBoolean': boolean;
            /**
             * This is a simple enum with default value
             */
            'parameterEnum': string;
            /**
             * This is a simple model with default value
             */
            'parameterModel': ModelWithString;
        };
    };

    response:;
}

/**
 */
export interface CallWithDefaultOptionalParametersOperation {
    request: {
        query: {
            /**
             * This is a simple string that is optional with default value
             */
            'parameterString': string;
            /**
             * This is a simple number that is optional with default value
             */
            'parameterNumber': number;
            /**
             * This is a simple boolean that is optional with default value
             */
            'parameterBoolean': boolean;
            /**
             * This is a simple enum that is optional with default value
             */
            'parameterEnum': string;
            /**
             * This is a simple model that is optional with default value
             */
            'parameterModel': ModelWithString;
        };
    };

    response:;
}

/**
 */
export interface CallToTestOrderOfParamsOperation {
    request: {
        query: {
            /**
             * This is a optional string with default
             */
            'parameterOptionalStringWithDefault': string;
            /**
             * This is a optional string with empty default
             */
            'parameterOptionalStringWithEmptyDefault': string;
            /**
             * This is a optional string with no default
             */
            'parameterOptionalStringWithNoDefault': string;
            /**
             * This is a string with default
             */
            'parameterStringWithDefault': string;
            /**
             * This is a string with empty default
             */
            'parameterStringWithEmptyDefault': string;
            /**
             * This is a string with no default
             */
            'parameterStringWithNoDefault': string;
            /**
             * This is a string that can be null with no default
             */
            'parameterStringNullableWithNoDefault': string;
            /**
             * This is a string that can be null with default
             */
            'parameterStringNullableWithDefault': string;
        };
    };

    response:;
}


"
`;

exports[`v3 should generate: ./test/generated/v3/operations/DeprecatedSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { DeprecatedModel } from '../models/DeprecatedModel';

/**
 * @deprecated
 */
export interface DeprecatedCallOperation {
    request: {
        headers: {
            /**
             * This parameter is deprecated
             */
            'parameter': DeprecatedModel;
        };
    };

    response:;
}


"
`;

exports[`v3 should generate: ./test/generated/v3/operations/DescriptionsSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface CallWithDescriptionsOperation {
    request: {
        query: {
            /**
             * Testing multiline comments in string: First line
             * Second line
             *
             * Fourth line
             */
            'parameterWithBreaks': any;
            /**
             * Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work
             */
            'parameterWithBackticks': any;
            /**
             * Testing slashes in string: \\\\backwards\\\\\\\\\\\\ and /forwards/// should work
             */
            'parameterWithSlashes': any;
            /**
             * Testing expression placeholders in string: \${expression} should work
             */
            'parameterWithExpressionPlaceholders': any;
            /**
             * Testing quotes in string: 'single quote''' and \\"double quotes\\"\\"\\" should work
             */
            'parameterWithQuotes': any;
            /**
             * Testing reserved characters in string: * inline * and ** inline ** should work
             */
            'parameterWithReservedCharacters': any;
        };
    };

    response:;
}


"
`;

exports[`v3 should generate: ./test/generated/v3/operations/DuplicateSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface DuplicateNameOperation {
    request: {
    };

    response:;
}

/**
 */
export interface DuplicateName1Operation {
    request: {
    };

    response:;
}

/**
 */
export interface DuplicateName2Operation {
    request: {
    };

    response:;
}

/**
 */
export interface DuplicateName3Operation {
    request: {
    };

    response:;
}


"
`;

exports[`v3 should generate: ./test/generated/v3/operations/ErrorSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface TestErrorCodeOperation {
    request: {
        query: {
            /**
             * Status code to return
             */
            'status': number;
        };
    };

    response: | any | any | any | any | any;
}


"
`;

exports[`v3 should generate: ./test/generated/v3/operations/FormDataSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { ModelWithString } from '../models/ModelWithString';

/**
 */
export interface PostApiFormDataOperation {
    request: {
        query: {
            /**
             * This is a reusable parameter
             */
            'parameter': string;
        };
        /**
         * A reusable request body
         */
        formData: ModelWithString;
        /**
         * A reusable request body
         */
        mediaType: 'multipart/form-data';
    };

    response:;
}


"
`;

exports[`v3 should generate: ./test/generated/v3/operations/HeaderSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface CallWithResultFromHeaderOperation {
    request: {
    };

    response: | string | any | any;
}


"
`;

exports[`v3 should generate: ./test/generated/v3/operations/MultipartSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { ModelWithString } from '../models/ModelWithString';

/**
 */
export interface MultipartRequestOperation {
    request: {
        formData: any;
        mediaType: 'multipart/form-data';
    };

    response:;
}

/**
 */
export interface MultipartResponseOperation {
    request: {
    };

    response: | any;
}


"
`;

exports[`v3 should generate: ./test/generated/v3/operations/MultipleTags1Svc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface DummyAOperation {
    request: {
    };

    response: | void;
}

/**
 */
export interface DummyBOperation {
    request: {
    };

    response: | void;
}


"
`;

exports[`v3 should generate: ./test/generated/v3/operations/MultipleTags2Svc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface DummyAOperation {
    request: {
    };

    response: | void;
}

/**
 */
export interface DummyBOperation {
    request: {
    };

    response: | void;
}


"
`;

exports[`v3 should generate: ./test/generated/v3/operations/MultipleTags3Svc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface DummyBOperation {
    request: {
    };

    response: | void;
}


"
`;

exports[`v3 should generate: ./test/generated/v3/operations/NoContentSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface CallWithNoContentResponseOperation {
    request: {
    };

    response: | void;
}


"
`;

exports[`v3 should generate: ./test/generated/v3/operations/ParametersSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { ModelWithString } from '../models/ModelWithString';
import type { Pageable } from '../models/Pageable';

/**
 */
export interface CallWithParametersOperation {
    request: {
        path: {
            /**
             * This is the parameter that goes into the path
             */
            'parameterPath': string;
        };
        cookies: {
            /**
             * This is the parameter that goes into the cookie
             */
            'parameterCookie': string;
        };
        headers: {
            /**
             * This is the parameter that goes into the header
             */
            'parameterHeader': string;
        };
        query: {
            /**
             * This is the parameter that goes into the query params
             */
            'parameterQuery': string;
        };
        formData: {
            /**
             * This is the parameter that goes into the form data
             */
            'parameterForm': string;
        };
        /**
         * This is the parameter that goes into the body
         */
        body: ModelWithString;
        /**
         * This is the parameter that goes into the body
         */
        mediaType: 'application/json';
    };

    response:;
}

/**
 */
export interface CallWithWeirdParameterNamesOperation {
    request: {
        path: {
            /**
             * This is the parameter that goes into the path
             */
            'parameter.path.1': string;
            /**
             * This is the parameter that goes into the path
             */
            'parameter-path-2': string;
            /**
             * This is the parameter that goes into the path
             */
            'PARAMETER-PATH-3': string;
        };
        cookies: {
            /**
             * This is the parameter that goes into the cookie
             */
            'PARAMETER-COOKIE': string;
        };
        headers: {
            /**
             * This is the parameter that goes into the request header
             */
            'parameter.header': string;
        };
        query: {
            /**
             * This is the parameter with a reserved keyword
             */
            'default': string;
            /**
             * This is the parameter that goes into the request query params
             */
            'parameter-query': string;
        };
        formData: {
            /**
             * This is the parameter that goes into the request form data
             */
            'parameter_form': string;
        };
        /**
         * This is the parameter that goes into the body
         */
        body: ModelWithString;
        /**
         * This is the parameter that goes into the body
         */
        mediaType: 'application/json';
    };

    response:;
}

/**
 */
export interface GetCallWithOptionalParamOperation {
    request: {
        query: {
            /**
             * This is an optional parameter
             */
            'parameter': string;
        };
        /**
         * This is a required parameter
         */
        body: ModelWithString;
        /**
         * This is a required parameter
         */
        mediaType: 'application/json';
    };

    response:;
}

/**
 */
export interface PostCallWithOptionalParamOperation {
    request: {
        query: {
            /**
             * This is a required parameter
             */
            'parameter': Pageable;
        };
        /**
         * This is an optional parameter
         */
        body: ModelWithString;
        /**
         * This is an optional parameter
         */
        mediaType: 'application/json';
    };

    response:;
}


"
`;

exports[`v3 should generate: ./test/generated/v3/operations/RequestBodySvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { ModelWithString } from '../models/ModelWithString';

/**
 */
export interface PostApiRequestBodyOperation {
    request: {
        query: {
            /**
             * This is a reusable parameter
             */
            'parameter': string;
        };
        /**
         * A reusable request body
         */
        body: ModelWithString;
        /**
         * A reusable request body
         */
        mediaType: 'application/json';
    };

    response:;
}


"
`;

exports[`v3 should generate: ./test/generated/v3/operations/ResponseSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { ModelThatExtends } from '../models/ModelThatExtends';
import type { ModelThatExtendsExtends } from '../models/ModelThatExtendsExtends';
import type { ModelWithString } from '../models/ModelWithString';
import type { ModelWithString } from '../models/ModelWithString';

/**
 */
export interface CallWithResponseOperation {
    request: {
    };

    response: | ModelWithString;
}

/**
 */
export interface CallWithDuplicateResponsesOperation {
    request: {
    };

    response: | ModelWithString | ModelWithString | ModelWithString | ModelWithString;
}

/**
 */
export interface CallWithResponsesOperation {
    request: {
    };

    response: | any | ModelWithString | ModelThatExtends | ModelThatExtendsExtends | ModelWithString | ModelWithString | ModelWithString;
}


"
`;

exports[`v3 should generate: ./test/generated/v3/operations/SimpleSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface GetCallWithoutParametersAndResponseOperation {
    request: {
    };

    response:;
}

/**
 */
export interface PutCallWithoutParametersAndResponseOperation {
    request: {
    };

    response:;
}

/**
 */
export interface PostCallWithoutParametersAndResponseOperation {
    request: {
    };

    response:;
}

/**
 */
export interface DeleteCallWithoutParametersAndResponseOperation {
    request: {
    };

    response:;
}

/**
 */
export interface OptionsCallWithoutParametersAndResponseOperation {
    request: {
    };

    response:;
}

/**
 */
export interface HeadCallWithoutParametersAndResponseOperation {
    request: {
    };

    response:;
}

/**
 */
export interface PatchCallWithoutParametersAndResponseOperation {
    request: {
    };

    response:;
}


"
`;

exports[`v3 should generate: ./test/generated/v3/operations/TypesSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface TypesOperation {
    request: {
        path: {
            /**
             * This is a number parameter
             */
            'id': number;
        };
        query: {
            /**
             * This is a number parameter
             */
            'parameterNumber': number;
            /**
             * This is a string parameter
             */
            'parameterString': string;
            /**
             * This is a boolean parameter
             */
            'parameterBoolean': boolean;
            /**
             * This is an object parameter
             */
            'parameterObject': any;
            /**
             * This is an array parameter
             */
            'parameterArray': string;
            /**
             * This is a dictionary parameter
             */
            'parameterDictionary': any;
            /**
             * This is an enum parameter
             */
            'parameterEnum': string;
        };
    };

    response: | number | string | boolean | any;
}


"
`;

exports[`v3 should generate: ./test/generated/v3/operations/UploadSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
/**
 */
export interface UploadFileOperation {
    request: {
        formData: {
            /**
             * Supply a file reference for upload
             */
            'file': binary;
        };
    };

    response: | boolean;
}


"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ArrayWithArray.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ArrayWithArray = {
    type: 'array',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ArrayWithBooleans.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ArrayWithBooleans = {
    type: 'array',
    contains: {
        type: 'boolean',
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ArrayWithNumbers.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ArrayWithNumbers = {
    type: 'array',
    contains: {
        type: 'number',
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ArrayWithProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ArrayWithProperties = {
    type: 'array',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ArrayWithReferences.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ArrayWithReferences = {
    type: 'array',
    contains: {
        type: 'ModelWithString',
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ArrayWithStrings.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ArrayWithStrings = {
    type: 'array',
    contains: {
        type: 'string',
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CommentWithBackticks.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CommentWithBackticks = {
    type: 'number',
    description: \`Testing backticks in string: \\\\\`backticks\\\\\` and \\\\\`\\\\\`\\\\\`multiple backticks\\\\\`\\\\\`\\\\\` should work\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CommentWithBreaks.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CommentWithBreaks = {
    type: 'number',
    description: \`Testing multiline comments in string: First line
    Second line

    Fourth line\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CommentWithExpressionPlaceholders.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CommentWithExpressionPlaceholders = {
    type: 'number',
    description: \`Testing expression placeholders in string: \\\\\${expression} should work\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CommentWithQuotes.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CommentWithQuotes = {
    type: 'number',
    description: \`Testing quotes in string: 'single quote''' and \\"double quotes\\"\\"\\" should work\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CommentWithReservedCharacters.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CommentWithReservedCharacters = {
    type: 'number',
    description: \`Testing reserved characters in string: /* inline */ and /** inline **/ should work\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CommentWithSlashes.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CommentWithSlashes = {
    type: 'number',
    description: \`Testing slashes in string: \\\\\\\\backwards\\\\\\\\\\\\\\\\\\\\\\\\ and /forwards/// should work\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionBaseModel.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CompositionBaseModel = {
    description: \`This is a base model with two simple optional properties\`,
    properties: {
        firstName: {
            type: 'string',
        },
        lastname: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionExtendedModel.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CompositionExtendedModel = {
    type: 'all-of',
    description: \`This is a model that extends the base model\`,
    contains: [{
        type: 'CompositionBaseModel',
    }, {
        properties: {
            firstName: {
                type: 'string',
                isRequired: true,
            },
            lastname: {
                type: 'string',
                isRequired: true,
            },
            age: {
                type: 'number',
                isRequired: true,
            },
        },
    }],
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionWithAllOfAndNullable.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CompositionWithAllOfAndNullable = {
    description: \`This is a model with one property with a 'all of' relationship\`,
    properties: {
        propA: {
            type: 'all-of',
            contains: [{
                properties: {
                    boolean: {
                        type: 'boolean',
                    },
                },
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionWithAnyOf.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CompositionWithAnyOf = {
    description: \`This is a model with one property with a 'any of' relationship\`,
    properties: {
        propA: {
            type: 'any-of',
            contains: [{
                type: 'ModelWithString',
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionWithAnyOfAndNullable.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CompositionWithAnyOfAndNullable = {
    description: \`This is a model with one property with a 'any of' relationship\`,
    properties: {
        propA: {
            type: 'any-of',
            contains: [{
                properties: {
                    boolean: {
                        type: 'boolean',
                    },
                },
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionWithAnyOfAnonymous.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CompositionWithAnyOfAnonymous = {
    description: \`This is a model with one property with a 'any of' relationship where the options are not $ref\`,
    properties: {
        propA: {
            type: 'any-of',
            contains: [{
                description: \`Anonymous object type\`,
                properties: {
                    propA: {
                        type: 'string',
                    },
                },
            }, {
                type: 'string',
                description: \`Anonymous string type\`,
            }, {
                type: 'number',
                description: \`Anonymous integer type\`,
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionWithOneOf.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CompositionWithOneOf = {
    description: \`This is a model with one property with a 'one of' relationship\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                type: 'ModelWithString',
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionWithOneOfAndComplexArrayDictionary.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CompositionWithOneOfAndComplexArrayDictionary = {
    description: \`This is a model that contains a dictionary of complex arrays (composited) within composition\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                type: 'boolean',
            }, {
                type: 'dictionary',
                contains: {
                    type: 'array',
                    contains: {
                        type: 'one-of',
                        contains: [{
                            type: 'number',
                        }, {
                            type: 'string',
                        }],
                    },
                },
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionWithOneOfAndNullable.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CompositionWithOneOfAndNullable = {
    description: \`This is a model with one property with a 'one of' relationship\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                properties: {
                    boolean: {
                        type: 'boolean',
                    },
                },
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionWithOneOfAndSimpleArrayDictionary.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CompositionWithOneOfAndSimpleArrayDictionary = {
    description: \`This is a model that contains a dictionary of simple arrays within composition\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                type: 'boolean',
            }, {
                type: 'dictionary',
                contains: {
                    type: 'array',
                    contains: {
                        type: 'boolean',
                    },
                },
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionWithOneOfAndSimpleDictionary.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CompositionWithOneOfAndSimpleDictionary = {
    description: \`This is a model that contains a simple dictionary within composition\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                type: 'boolean',
            }, {
                type: 'dictionary',
                contains: {
                    type: 'number',
                },
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionWithOneOfAnonymous.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CompositionWithOneOfAnonymous = {
    description: \`This is a model with one property with a 'one of' relationship where the options are not $ref\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                description: \`Anonymous object type\`,
                properties: {
                    propA: {
                        type: 'string',
                    },
                },
            }, {
                type: 'string',
                description: \`Anonymous string type\`,
            }, {
                type: 'number',
                description: \`Anonymous integer type\`,
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionWithOneOfDiscriminator.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $CompositionWithOneOfDiscriminator = {
    type: 'one-of',
    description: \`This is a model with one property with a 'one of' relationship where the options are not $ref\`,
    contains: [{
        type: 'ModelCircle',
    }, {
        type: 'ModelSquare',
    }],
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$DeprecatedModel.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $DeprecatedModel = {
    description: \`This is a deprecated model with a deprecated property\`,
    properties: {
        prop: {
            type: 'string',
            description: \`This is a deprecated property\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$DictionaryWithArray.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $DictionaryWithArray = {
    type: 'dictionary',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$DictionaryWithDictionary.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $DictionaryWithDictionary = {
    type: 'dictionary',
    contains: {
        type: 'dictionary',
        contains: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$DictionaryWithProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $DictionaryWithProperties = {
    type: 'dictionary',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$DictionaryWithReference.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $DictionaryWithReference = {
    type: 'dictionary',
    contains: {
        type: 'ModelWithString',
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$DictionaryWithString.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $DictionaryWithString = {
    type: 'dictionary',
    contains: {
        type: 'string',
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$EnumFromDescription.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $EnumFromDescription = {
    type: 'number',
    description: \`Success=1,Warning=2,Error=3\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$EnumWithExtensions.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $EnumWithExtensions = {
    type: 'Enum',
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$EnumWithNumbers.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $EnumWithNumbers = {
    type: 'Enum',
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$EnumWithStrings.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $EnumWithStrings = {
    type: 'Enum',
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$File.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $File = {
    properties: {
        id: {
            type: 'string',
            isReadOnly: true,
            minLength: 1,
        },
        updated_at: {
            type: 'string',
            isReadOnly: true,
            format: 'date-time',
        },
        created_at: {
            type: 'string',
            isReadOnly: true,
            format: 'date-time',
        },
        mime: {
            type: 'string',
            isRequired: true,
            maxLength: 24,
            minLength: 1,
        },
        file: {
            type: 'string',
            isReadOnly: true,
            format: 'uri',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelCircle.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelCircle = {
    description: \`Circle\`,
    properties: {
        kind: {
            type: 'string',
            isRequired: true,
        },
        radius: {
            type: 'number',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelSquare.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelSquare = {
    description: \`Square\`,
    properties: {
        kind: {
            type: 'string',
            isRequired: true,
        },
        sideLength: {
            type: 'number',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelThatExtends.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelThatExtends = {
    type: 'all-of',
    description: \`This is a model that extends another model\`,
    contains: [{
        type: 'ModelWithString',
    }, {
        properties: {
            propExtendsA: {
                type: 'string',
            },
            propExtendsB: {
                type: 'ModelWithString',
            },
        },
    }],
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelThatExtendsExtends.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelThatExtendsExtends = {
    type: 'all-of',
    description: \`This is a model that extends another model\`,
    contains: [{
        type: 'ModelWithString',
    }, {
        type: 'ModelThatExtends',
    }, {
        properties: {
            propExtendsC: {
                type: 'string',
            },
            propExtendsD: {
                type: 'ModelWithString',
            },
        },
    }],
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithArray.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithArray = {
    description: \`This is a model with one property containing an array\`,
    properties: {
        prop: {
            type: 'array',
            contains: {
                type: 'ModelWithString',
            },
        },
        propWithFile: {
            type: 'array',
            contains: {
                type: 'binary',
            },
        },
        propWithNumber: {
            type: 'array',
            contains: {
                type: 'number',
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithBoolean.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithBoolean = {
    description: \`This is a model with one boolean property\`,
    properties: {
        prop: {
            type: 'boolean',
            description: \`This is a simple boolean property\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithCircularReference.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithCircularReference = {
    description: \`This is a model with one property containing a circular reference\`,
    properties: {
        prop: {
            type: 'ModelWithCircularReference',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithDictionary.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithDictionary = {
    description: \`This is a model with one property containing a dictionary\`,
    properties: {
        prop: {
            type: 'dictionary',
            contains: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithDuplicateImports.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithDuplicateImports = {
    description: \`This is a model with duplicated imports\`,
    properties: {
        propA: {
            type: 'ModelWithString',
        },
        propB: {
            type: 'ModelWithString',
        },
        propC: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithDuplicateProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithDuplicateProperties = {
    description: \`This is a model with duplicated properties\`,
    properties: {
        prop: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithEnum.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithEnum = {
    description: \`This is a model with one enum\`,
    properties: {
        test: {
            type: 'Enum',
        },
        statusCode: {
            type: 'Enum',
        },
        bool: {
            type: 'boolean',
            description: \`Simple boolean enum\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithEnumFromDescription.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithEnumFromDescription = {
    description: \`This is a model with one enum\`,
    properties: {
        test: {
            type: 'number',
            description: \`Success=1,Warning=2,Error=3\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithInteger.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithInteger = {
    description: \`This is a model with one number property\`,
    properties: {
        prop: {
            type: 'number',
            description: \`This is a simple number property\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithNestedEnums.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithNestedEnums = {
    description: \`This is a model with nested enums\`,
    properties: {
        dictionaryWithEnum: {
            type: 'dictionary',
            contains: {
                type: 'Enum',
            },
        },
        dictionaryWithEnumFromDescription: {
            type: 'dictionary',
            contains: {
                type: 'number',
                description: \`Success=1,Warning=2,Error=3\`,
            },
        },
        arrayWithEnum: {
            type: 'array',
            contains: {
                type: 'Enum',
            },
        },
        arrayWithDescription: {
            type: 'array',
            contains: {
                type: 'number',
                description: \`Success=1,Warning=2,Error=3\`,
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithNestedProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithNestedProperties = {
    description: \`This is a model with one nested property\`,
    properties: {
        first: {
            properties: {
                second: {
                    properties: {
                        third: {
                            type: 'string',
                            isReadOnly: true,
                            isRequired: true,
                            isNullable: true,
                        },
                    },
                    isReadOnly: true,
                    isRequired: true,
                    isNullable: true,
                },
            },
            isReadOnly: true,
            isRequired: true,
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithNullableString.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithNullableString = {
    description: \`This is a model with one string property\`,
    properties: {
        nullableProp1: {
            type: 'string',
            description: \`This is a simple string property\`,
            isNullable: true,
        },
        nullableRequiredProp1: {
            type: 'string',
            description: \`This is a simple string property\`,
            isRequired: true,
            isNullable: true,
        },
        nullableProp2: {
            type: 'string',
            description: \`This is a simple string property\`,
            isNullable: true,
        },
        nullableRequiredProp2: {
            type: 'string',
            description: \`This is a simple string property\`,
            isRequired: true,
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithOrderedProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithOrderedProperties = {
    description: \`This is a model with ordered properties\`,
    properties: {
        zebra: {
            type: 'string',
        },
        apple: {
            type: 'string',
        },
        hawaii: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithPattern.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithPattern = {
    description: \`This is a model that contains a some patterns\`,
    properties: {
        key: {
            type: 'string',
            isRequired: true,
            maxLength: 64,
            pattern: '^[a-zA-Z0-9_]*$',
        },
        name: {
            type: 'string',
            isRequired: true,
            maxLength: 255,
        },
        enabled: {
            type: 'boolean',
            isReadOnly: true,
        },
        modified: {
            type: 'string',
            isReadOnly: true,
            format: 'date-time',
        },
        id: {
            type: 'string',
            pattern: '^\\\\\\\\d{2}-\\\\\\\\d{3}-\\\\\\\\d{4}$',
        },
        text: {
            type: 'string',
            pattern: '^\\\\\\\\w+$',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithProperties.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithProperties = {
    description: \`This is a model with one nested property\`,
    properties: {
        required: {
            type: 'string',
            isRequired: true,
        },
        requiredAndReadOnly: {
            type: 'string',
            isReadOnly: true,
            isRequired: true,
        },
        requiredAndNullable: {
            type: 'string',
            isRequired: true,
            isNullable: true,
        },
        string: {
            type: 'string',
        },
        number: {
            type: 'number',
        },
        boolean: {
            type: 'boolean',
        },
        reference: {
            type: 'ModelWithString',
        },
        'property with space': {
            type: 'string',
        },
        default: {
            type: 'string',
        },
        try: {
            type: 'string',
        },
        '@namespace.string': {
            type: 'string',
            isReadOnly: true,
        },
        '@namespace.integer': {
            type: 'number',
            isReadOnly: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithReference.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithReference = {
    description: \`This is a model with one property containing a reference\`,
    properties: {
        prop: {
            type: 'ModelWithProperties',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithString.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $ModelWithString = {
    description: \`This is a model with one string property\`,
    properties: {
        prop: {
            type: 'string',
            description: \`This is a simple string property\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$Pageable.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $Pageable = {
    properties: {
        page: {
            type: 'number',
            format: 'int32',
        },
        size: {
            type: 'number',
            format: 'int32',
            minimum: 1,
        },
        sort: {
            type: 'array',
            contains: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$SimpleBoolean.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $SimpleBoolean = {
    type: 'boolean',
    description: \`This is a simple boolean\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$SimpleFile.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $SimpleFile = {
    type: 'binary',
    description: \`This is a simple file\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$SimpleInteger.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $SimpleInteger = {
    type: 'number',
    description: \`This is a simple number\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$SimpleReference.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $SimpleReference = {
    type: 'ModelWithString',
    description: \`This is a simple reference\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$SimpleString.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $SimpleString = {
    type: 'string',
    description: \`This is a simple string\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$SimpleStringWithPattern.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
export const $SimpleStringWithPattern = {
    type: 'string',
    description: \`This is a simple string\`,
    isNullable: true,
    maxLength: 64,
    pattern: '^[a-zA-Z0-9_]*$',
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/services/CollectionFormatSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type CollectionFormatOperation = 'CollectionFormat.collectionFormat';

const URLs: Record<CollectionFormatOperation, { method: ApiRequestMethod; url: string; operation: CollectionFormatOperation }> = {
    'CollectionFormat.collectionFormat': { method: 'GET', url: '/api/v{api-version}/collectionFormat', operation: 'CollectionFormat.collectionFormat' },
};

const KEY = 'CollectionFormat';

export class CollectionFormatSvc {
    declare [OperationsType]: CollectionFormatOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        collectionFormat(...params: [parameterArrayCsv?: Array<string> | null, parameterArraySsv?: Array<string> | null, parameterArrayTsv?: Array<string> | null, parameterArrayPipes?: Array<string> | null, parameterArrayMulti?: Array<string> | null]): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'collectionFormat', ...params];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param parameterArrayCsv This is an array parameter that is sent as csv format (comma-separated values)
     * @param parameterArraySsv This is an array parameter that is sent as ssv format (space-separated values)
     * @param parameterArrayTsv This is an array parameter that is sent as tsv format (tab-separated values)
     * @param parameterArrayPipes This is an array parameter that is sent as pipes format (pipe-separated values)
     * @param parameterArrayMulti This is an array parameter that is sent as multi format (multiple parameter instances)
     * @param options Request option overrides
     * @throws ApiError
     */
    public collectionFormat(
        parameterArrayCsv: Array<string> | null,
        parameterArraySsv: Array<string> | null,
        parameterArrayTsv: Array<string> | null,
        parameterArrayPipes: Array<string> | null,
        parameterArrayMulti: Array<string> | null,
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['CollectionFormat.collectionFormat'],
            query: {
                'parameterArrayCSV': parameterArrayCsv,
                'parameterArraySSV': parameterArraySsv,
                'parameterArrayTSV': parameterArrayTsv,
                'parameterArrayPipes': parameterArrayPipes,
                'parameterArrayMulti': parameterArrayMulti,
            },
            ...options,
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/ComplexSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ModelWithArray } from '../models/ModelWithArray';
import type { ModelWithDictionary } from '../models/ModelWithDictionary';
import type { ModelWithEnum } from '../models/ModelWithEnum';
import type { ModelWithString } from '../models/ModelWithString';

import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type ComplexOperation = 'Complex.complexTypes' | 'Complex.complexParams';

const URLs: Record<ComplexOperation, { method: ApiRequestMethod; url: string; operation: ComplexOperation }> = {
    'Complex.complexTypes': { method: 'GET', url: '/api/v{api-version}/complex', operation: 'Complex.complexTypes' },
    'Complex.complexParams': { method: 'PUT', url: '/api/v{api-version}/complex/{id}', operation: 'Complex.complexParams' },
};

const KEY = 'Complex';

export class ComplexSvc {
    declare [OperationsType]: ComplexOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        complexTypes(...params: [parameterObject?: {
            first?: {
                second?: {
                    third?: string;
                };
            };
        }, parameterReference?: ModelWithString]): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'complex', ...params];
        },
        complexParams(...params: [id?: number, requestBody?: {
            readonly key: string | null;
            name: string | null;
            enabled?: boolean;
            readonly type: 'Monkey' | 'Horse' | 'Bird';
            listOfModels?: Array<ModelWithString> | null;
            listOfStrings?: Array<string> | null;
            parameters: (ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary);
            readonly user?: {
                readonly id?: number;
                readonly name?: string | null;
            };
        }]): readonly unknown[] {
            return [KEY, 'PUT', 'api', 'v{api-version}', 'complex', '{id}', ...params];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param parameterObject Parameter containing object
     * @param parameterReference Parameter containing reference
     * @param options Request option overrides
     * @returns ModelWithString Successful response
     * @throws ApiError
     */
    public complexTypes(
        parameterObject: {
            first?: {
                second?: {
                    third?: string;
                };
            };
        },
        parameterReference: ModelWithString,
        options?: Partial<ApiRequestOptions>,
    ): Promise<Array<ModelWithString>> {
        return __request(this.config, {
            ...URLs['Complex.complexTypes'],
            query: {
                'parameterObject': parameterObject,
                'parameterReference': parameterReference,
            },
            errors: {
                400: \`400 server error\`,
                500: \`500 server error\`,
            },
            ...options,
        });
    }

    /**
     * @param id
     * @param requestBody
     * @param options Request option overrides
     * @returns ModelWithString Success
     * @throws ApiError
     */
    public complexParams(
        id: number,
        requestBody?: {
            readonly key: string | null;
            name: string | null;
            enabled?: boolean;
            readonly type: 'Monkey' | 'Horse' | 'Bird';
            listOfModels?: Array<ModelWithString> | null;
            listOfStrings?: Array<string> | null;
            parameters: (ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary);
            readonly user?: {
                readonly id?: number;
                readonly name?: string | null;
            };
        },
        options?: Partial<ApiRequestOptions>,
    ): Promise<ModelWithString> {
        return __request(this.config, {
            ...URLs['Complex.complexParams'],
            path: {
                'id': id,
            },
            body: requestBody,
            mediaType: 'application/json-patch+json',
            ...options,
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/DefaultSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type DefaultOperation = 'Default.serviceWithEmptyTag';

const URLs: Record<DefaultOperation, { method: ApiRequestMethod; url: string; operation: DefaultOperation }> = {
    'Default.serviceWithEmptyTag': { method: 'GET', url: '/api/v{api-version}/no-tag', operation: 'Default.serviceWithEmptyTag' },
};

const KEY = 'Default';

export class DefaultSvc {
    declare [OperationsType]: DefaultOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        serviceWithEmptyTag(): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'no-tag', ];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public serviceWithEmptyTag(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Default.serviceWithEmptyTag'],
            ...options,
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/DefaultsSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ModelWithString } from '../models/ModelWithString';

import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type DefaultsOperation = 'Defaults.callWithDefaultParameters' | 'Defaults.callWithDefaultOptionalParameters' | 'Defaults.callToTestOrderOfParams';

const URLs: Record<DefaultsOperation, { method: ApiRequestMethod; url: string; operation: DefaultsOperation }> = {
    'Defaults.callWithDefaultParameters': { method: 'GET', url: '/api/v{api-version}/defaults', operation: 'Defaults.callWithDefaultParameters' },
    'Defaults.callWithDefaultOptionalParameters': { method: 'POST', url: '/api/v{api-version}/defaults', operation: 'Defaults.callWithDefaultOptionalParameters' },
    'Defaults.callToTestOrderOfParams': { method: 'PUT', url: '/api/v{api-version}/defaults', operation: 'Defaults.callToTestOrderOfParams' },
};

const KEY = 'Defaults';

export class DefaultsSvc {
    declare [OperationsType]: DefaultsOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        callWithDefaultParameters(...params: [parameterString?: string | null, parameterNumber?: number | null, parameterBoolean?: boolean | null, parameterEnum?: 'Success' | 'Warning' | 'Error', parameterModel?: ModelWithString | null]): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'defaults', ...params];
        },
        callWithDefaultOptionalParameters(...params: [parameterString?: string, parameterNumber?: number, parameterBoolean?: boolean, parameterEnum?: 'Success' | 'Warning' | 'Error', parameterModel?: ModelWithString]): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'defaults', ...params];
        },
        callToTestOrderOfParams(...params: [parameterStringWithNoDefault?: string, parameterOptionalStringWithDefault?: string, parameterOptionalStringWithEmptyDefault?: string, parameterOptionalStringWithNoDefault?: string, parameterStringWithDefault?: string, parameterStringWithEmptyDefault?: string, parameterStringNullableWithNoDefault?: string | null, parameterStringNullableWithDefault?: string | null]): readonly unknown[] {
            return [KEY, 'PUT', 'api', 'v{api-version}', 'defaults', ...params];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param parameterString This is a simple string with default value
     * @param parameterNumber This is a simple number with default value
     * @param parameterBoolean This is a simple boolean with default value
     * @param parameterEnum This is a simple enum with default value
     * @param parameterModel This is a simple model with default value
     * @param options Request option overrides
     * @throws ApiError
     */
    public callWithDefaultParameters(
        parameterString: string | null = 'Hello World!',
        parameterNumber: number | null = 123,
        parameterBoolean: boolean | null = true,
        parameterEnum: 'Success' | 'Warning' | 'Error' = 'Success',
        parameterModel: ModelWithString | null = {
            \\"prop\\": \\"Hello World!\\"
        },
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Defaults.callWithDefaultParameters'],
            query: {
                'parameterString': parameterString,
                'parameterNumber': parameterNumber,
                'parameterBoolean': parameterBoolean,
                'parameterEnum': parameterEnum,
                'parameterModel': parameterModel,
            },
            ...options,
        });
    }

    /**
     * @param parameterString This is a simple string that is optional with default value
     * @param parameterNumber This is a simple number that is optional with default value
     * @param parameterBoolean This is a simple boolean that is optional with default value
     * @param parameterEnum This is a simple enum that is optional with default value
     * @param parameterModel This is a simple model that is optional with default value
     * @param options Request option overrides
     * @throws ApiError
     */
    public callWithDefaultOptionalParameters(
        parameterString: string = 'Hello World!',
        parameterNumber: number = 123,
        parameterBoolean: boolean = true,
        parameterEnum: 'Success' | 'Warning' | 'Error' = 'Success',
        parameterModel: ModelWithString = {
            \\"prop\\": \\"Hello World!\\"
        },
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Defaults.callWithDefaultOptionalParameters'],
            query: {
                'parameterString': parameterString,
                'parameterNumber': parameterNumber,
                'parameterBoolean': parameterBoolean,
                'parameterEnum': parameterEnum,
                'parameterModel': parameterModel,
            },
            ...options,
        });
    }

    /**
     * @param parameterStringWithNoDefault This is a string with no default
     * @param parameterOptionalStringWithDefault This is a optional string with default
     * @param parameterOptionalStringWithEmptyDefault This is a optional string with empty default
     * @param parameterOptionalStringWithNoDefault This is a optional string with no default
     * @param parameterStringWithDefault This is a string with default
     * @param parameterStringWithEmptyDefault This is a string with empty default
     * @param parameterStringNullableWithNoDefault This is a string that can be null with no default
     * @param parameterStringNullableWithDefault This is a string that can be null with default
     * @param options Request option overrides
     * @throws ApiError
     */
    public callToTestOrderOfParams(
        parameterStringWithNoDefault: string,
        parameterOptionalStringWithDefault: string = 'Hello World!',
        parameterOptionalStringWithEmptyDefault: string = '',
        parameterOptionalStringWithNoDefault?: string,
        parameterStringWithDefault: string = 'Hello World!',
        parameterStringWithEmptyDefault: string = '',
        parameterStringNullableWithNoDefault?: string | null,
        parameterStringNullableWithDefault: string | null = null,
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Defaults.callToTestOrderOfParams'],
            query: {
                'parameterOptionalStringWithDefault': parameterOptionalStringWithDefault,
                'parameterOptionalStringWithEmptyDefault': parameterOptionalStringWithEmptyDefault,
                'parameterOptionalStringWithNoDefault': parameterOptionalStringWithNoDefault,
                'parameterStringWithDefault': parameterStringWithDefault,
                'parameterStringWithEmptyDefault': parameterStringWithEmptyDefault,
                'parameterStringWithNoDefault': parameterStringWithNoDefault,
                'parameterStringNullableWithNoDefault': parameterStringNullableWithNoDefault,
                'parameterStringNullableWithDefault': parameterStringNullableWithDefault,
            },
            ...options,
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/DeprecatedSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { DeprecatedModel } from '../models/DeprecatedModel';

import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type DeprecatedOperation = 'Deprecated.deprecatedCall';

const URLs: Record<DeprecatedOperation, { method: ApiRequestMethod; url: string; operation: DeprecatedOperation }> = {
    'Deprecated.deprecatedCall': { method: 'POST', url: '/api/v{api-version}/parameters/deprecated', operation: 'Deprecated.deprecatedCall' },
};

const KEY = 'Deprecated';

export class DeprecatedSvc {
    declare [OperationsType]: DeprecatedOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        deprecatedCall(...params: [parameter?: DeprecatedModel | null]): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'parameters', 'deprecated', ...params];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @deprecated
     * @param parameter This parameter is deprecated
     * @param options Request option overrides
     * @throws ApiError
     */
    public deprecatedCall(
        parameter: DeprecatedModel | null,
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Deprecated.deprecatedCall'],
            headers: {
                'parameter': parameter,
            },
            ...options,
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/DescriptionsSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type DescriptionsOperation = 'Descriptions.callWithDescriptions';

const URLs: Record<DescriptionsOperation, { method: ApiRequestMethod; url: string; operation: DescriptionsOperation }> = {
    'Descriptions.callWithDescriptions': { method: 'POST', url: '/api/v{api-version}/descriptions/', operation: 'Descriptions.callWithDescriptions' },
};

const KEY = 'Descriptions';

export class DescriptionsSvc {
    declare [OperationsType]: DescriptionsOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        callWithDescriptions(...params: [parameterWithBreaks?: any, parameterWithBackticks?: any, parameterWithSlashes?: any, parameterWithExpressionPlaceholders?: any, parameterWithQuotes?: any, parameterWithReservedCharacters?: any]): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'descriptions', ...params];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param parameterWithBreaks Testing multiline comments in string: First line
     * Second line
     *
     * Fourth line
     * @param parameterWithBackticks Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work
     * @param parameterWithSlashes Testing slashes in string: \\\\backwards\\\\\\\\\\\\ and /forwards/// should work
     * @param parameterWithExpressionPlaceholders Testing expression placeholders in string: \${expression} should work
     * @param parameterWithQuotes Testing quotes in string: 'single quote''' and \\"double quotes\\"\\"\\" should work
     * @param parameterWithReservedCharacters Testing reserved characters in string: * inline * and ** inline ** should work
     * @param options Request option overrides
     * @throws ApiError
     */
    public callWithDescriptions(
        parameterWithBreaks?: any,
        parameterWithBackticks?: any,
        parameterWithSlashes?: any,
        parameterWithExpressionPlaceholders?: any,
        parameterWithQuotes?: any,
        parameterWithReservedCharacters?: any,
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Descriptions.callWithDescriptions'],
            query: {
                'parameterWithBreaks': parameterWithBreaks,
                'parameterWithBackticks': parameterWithBackticks,
                'parameterWithSlashes': parameterWithSlashes,
                'parameterWithExpressionPlaceholders': parameterWithExpressionPlaceholders,
                'parameterWithQuotes': parameterWithQuotes,
                'parameterWithReservedCharacters': parameterWithReservedCharacters,
            },
            ...options,
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/DuplicateSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type DuplicateOperation = 'Duplicate.duplicateName' | 'Duplicate.duplicateName1' | 'Duplicate.duplicateName2' | 'Duplicate.duplicateName3';

const URLs: Record<DuplicateOperation, { method: ApiRequestMethod; url: string; operation: DuplicateOperation }> = {
    'Duplicate.duplicateName': { method: 'GET', url: '/api/v{api-version}/duplicate', operation: 'Duplicate.duplicateName' },
    'Duplicate.duplicateName1': { method: 'POST', url: '/api/v{api-version}/duplicate', operation: 'Duplicate.duplicateName1' },
    'Duplicate.duplicateName2': { method: 'PUT', url: '/api/v{api-version}/duplicate', operation: 'Duplicate.duplicateName2' },
    'Duplicate.duplicateName3': { method: 'DELETE', url: '/api/v{api-version}/duplicate', operation: 'Duplicate.duplicateName3' },
};

const KEY = 'Duplicate';

export class DuplicateSvc {
    declare [OperationsType]: DuplicateOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        duplicateName(): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'duplicate', ];
        },
        duplicateName1(): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'duplicate', ];
        },
        duplicateName2(): readonly unknown[] {
            return [KEY, 'PUT', 'api', 'v{api-version}', 'duplicate', ];
        },
        duplicateName3(): readonly unknown[] {
            return [KEY, 'DELETE', 'api', 'v{api-version}', 'duplicate', ];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public duplicateName(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Duplicate.duplicateName'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public duplicateName1(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Duplicate.duplicateName1'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public duplicateName2(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Duplicate.duplicateName2'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public duplicateName3(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Duplicate.duplicateName3'],
            ...options,
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/ErrorSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type ErrorOperation = 'Error.testErrorCode';

const URLs: Record<ErrorOperation, { method: ApiRequestMethod; url: string; operation: ErrorOperation }> = {
    'Error.testErrorCode': { method: 'POST', url: '/api/v{api-version}/error', operation: 'Error.testErrorCode' },
};

const KEY = 'Error';

export class ErrorSvc {
    declare [OperationsType]: ErrorOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        testErrorCode(...params: [status?: number]): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'error', ...params];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param status Status code to return
     * @param options Request option overrides
     * @returns any Custom message: Successful response
     * @throws ApiError
     */
    public testErrorCode(
        status: number,
        options?: Partial<ApiRequestOptions>,
    ): Promise<any> {
        return __request(this.config, {
            ...URLs['Error.testErrorCode'],
            query: {
                'status': status,
            },
            errors: {
                500: \`Custom message: Internal Server Error\`,
                501: \`Custom message: Not Implemented\`,
                502: \`Custom message: Bad Gateway\`,
                503: \`Custom message: Service Unavailable\`,
            },
            ...options,
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/FormDataSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ModelWithString } from '../models/ModelWithString';

import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type FormDataOperation = 'FormData.postApiFormData';

const URLs: Record<FormDataOperation, { method: ApiRequestMethod; url: string; operation: FormDataOperation }> = {
    'FormData.postApiFormData': { method: 'POST', url: '/api/v{api-version}/formData/', operation: 'FormData.postApiFormData' },
};

const KEY = 'FormData';

export class FormDataSvc {
    declare [OperationsType]: FormDataOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        postApiFormData(...params: [parameter?: string, formData?: ModelWithString]): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'formData', ...params];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param parameter This is a reusable parameter
     * @param formData A reusable request body
     * @param options Request option overrides
     * @throws ApiError
     */
    public postApiFormData(
        parameter?: string,
        formData?: ModelWithString,
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['FormData.postApiFormData'],
            query: {
                'parameter': parameter,
            },
            formData: formData,
            mediaType: 'multipart/form-data',
            ...options,
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/HeaderSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type HeaderOperation = 'Header.callWithResultFromHeader';

const URLs: Record<HeaderOperation, { method: ApiRequestMethod; url: string; operation: HeaderOperation }> = {
    'Header.callWithResultFromHeader': { method: 'POST', url: '/api/v{api-version}/header', operation: 'Header.callWithResultFromHeader' },
};

const KEY = 'Header';

export class HeaderSvc {
    declare [OperationsType]: HeaderOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        callWithResultFromHeader(): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'header', ];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param options Request option overrides
     * @returns string Successful response
     * @throws ApiError
     */
    public callWithResultFromHeader(
        options?: Partial<ApiRequestOptions>,
    ): Promise<string> {
        return __request(this.config, {
            ...URLs['Header.callWithResultFromHeader'],
            responseHeader: 'operation-location',
            errors: {
                400: \`400 server error\`,
                500: \`500 server error\`,
            },
            ...options,
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/MultipartSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ModelWithString } from '../models/ModelWithString';

import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type MultipartOperation = 'Multipart.multipartRequest' | 'Multipart.multipartResponse';

const URLs: Record<MultipartOperation, { method: ApiRequestMethod; url: string; operation: MultipartOperation }> = {
    'Multipart.multipartRequest': { method: 'POST', url: '/api/v{api-version}/multipart', operation: 'Multipart.multipartRequest' },
    'Multipart.multipartResponse': { method: 'GET', url: '/api/v{api-version}/multipart', operation: 'Multipart.multipartResponse' },
};

const KEY = 'Multipart';

export class MultipartSvc {
    declare [OperationsType]: MultipartOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        multipartRequest(...params: [formData?: {
            content?: Blob;
            data?: ModelWithString | null;
        }]): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'multipart', ...params];
        },
        multipartResponse(): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'multipart', ];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param formData
     * @param options Request option overrides
     * @throws ApiError
     */
    public multipartRequest(
        formData?: {
            content?: Blob;
            data?: ModelWithString | null;
        },
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Multipart.multipartRequest'],
            formData: formData,
            mediaType: 'multipart/form-data',
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @returns any OK
     * @throws ApiError
     */
    public multipartResponse(
        options?: Partial<ApiRequestOptions>,
    ): Promise<{
        file?: Blob;
        metadata?: {
            foo?: string;
            bar?: string;
        };
    }> {
        return __request(this.config, {
            ...URLs['Multipart.multipartResponse'],
            ...options,
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/MultipleTags1Svc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type MultipleTags1Operation = 'MultipleTags1.dummyA' | 'MultipleTags1.dummyB';

const URLs: Record<MultipleTags1Operation, { method: ApiRequestMethod; url: string; operation: MultipleTags1Operation }> = {
    'MultipleTags1.dummyA': { method: 'GET', url: '/api/v{api-version}/multiple-tags/a', operation: 'MultipleTags1.dummyA' },
    'MultipleTags1.dummyB': { method: 'GET', url: '/api/v{api-version}/multiple-tags/b', operation: 'MultipleTags1.dummyB' },
};

const KEY = 'MultipleTags1';

export class MultipleTags1Svc {
    declare [OperationsType]: MultipleTags1Operation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        dummyA(): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'multiple-tags', 'a', ];
        },
        dummyB(): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'multiple-tags', 'b', ];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param options Request option overrides
     * @returns void
     * @throws ApiError
     */
    public dummyA(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['MultipleTags1.dummyA'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @returns void
     * @throws ApiError
     */
    public dummyB(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['MultipleTags1.dummyB'],
            ...options,
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/MultipleTags2Svc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type MultipleTags2Operation = 'MultipleTags2.dummyA' | 'MultipleTags2.dummyB';

const URLs: Record<MultipleTags2Operation, { method: ApiRequestMethod; url: string; operation: MultipleTags2Operation }> = {
    'MultipleTags2.dummyA': { method: 'GET', url: '/api/v{api-version}/multiple-tags/a', operation: 'MultipleTags2.dummyA' },
    'MultipleTags2.dummyB': { method: 'GET', url: '/api/v{api-version}/multiple-tags/b', operation: 'MultipleTags2.dummyB' },
};

const KEY = 'MultipleTags2';

export class MultipleTags2Svc {
    declare [OperationsType]: MultipleTags2Operation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        dummyA(): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'multiple-tags', 'a', ];
        },
        dummyB(): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'multiple-tags', 'b', ];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param options Request option overrides
     * @returns void
     * @throws ApiError
     */
    public dummyA(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['MultipleTags2.dummyA'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @returns void
     * @throws ApiError
     */
    public dummyB(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['MultipleTags2.dummyB'],
            ...options,
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/MultipleTags3Svc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type MultipleTags3Operation = 'MultipleTags3.dummyB';

const URLs: Record<MultipleTags3Operation, { method: ApiRequestMethod; url: string; operation: MultipleTags3Operation }> = {
    'MultipleTags3.dummyB': { method: 'GET', url: '/api/v{api-version}/multiple-tags/b', operation: 'MultipleTags3.dummyB' },
};

const KEY = 'MultipleTags3';

export class MultipleTags3Svc {
    declare [OperationsType]: MultipleTags3Operation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        dummyB(): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'multiple-tags', 'b', ];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param options Request option overrides
     * @returns void
     * @throws ApiError
     */
    public dummyB(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['MultipleTags3.dummyB'],
            ...options,
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/NoContentSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type NoContentOperation = 'NoContent.callWithNoContentResponse';

const URLs: Record<NoContentOperation, { method: ApiRequestMethod; url: string; operation: NoContentOperation }> = {
    'NoContent.callWithNoContentResponse': { method: 'GET', url: '/api/v{api-version}/no-content', operation: 'NoContent.callWithNoContentResponse' },
};

const KEY = 'NoContent';

export class NoContentSvc {
    declare [OperationsType]: NoContentOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        callWithNoContentResponse(): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'no-content', ];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param options Request option overrides
     * @returns void
     * @throws ApiError
     */
    public callWithNoContentResponse(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['NoContent.callWithNoContentResponse'],
            ...options,
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/ParametersSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ModelWithString } from '../models/ModelWithString';
import type { Pageable } from '../models/Pageable';

import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type ParametersOperation = 'Parameters.callWithParameters' | 'Parameters.callWithWeirdParameterNames' | 'Parameters.getCallWithOptionalParam' | 'Parameters.postCallWithOptionalParam';

const URLs: Record<ParametersOperation, { method: ApiRequestMethod; url: string; operation: ParametersOperation }> = {
    'Parameters.callWithParameters': { method: 'POST', url: '/api/v{api-version}/parameters/{parameterPath}', operation: 'Parameters.callWithParameters' },
    'Parameters.callWithWeirdParameterNames': { method: 'POST', url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}', operation: 'Parameters.callWithWeirdParameterNames' },
    'Parameters.getCallWithOptionalParam': { method: 'GET', url: '/api/v{api-version}/parameters/', operation: 'Parameters.getCallWithOptionalParam' },
    'Parameters.postCallWithOptionalParam': { method: 'POST', url: '/api/v{api-version}/parameters/', operation: 'Parameters.postCallWithOptionalParam' },
};

const KEY = 'Parameters';

export class ParametersSvc {
    declare [OperationsType]: ParametersOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        callWithParameters(...params: [parameterHeader?: string | null, parameterQuery?: string | null, parameterForm?: string | null, parameterCookie?: string | null, parameterPath?: string | null, requestBody?: ModelWithString | null]): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'parameters', '{parameterPath}', ...params];
        },
        callWithWeirdParameterNames(...params: [parameterHeader?: string | null, parameterQuery?: string | null, parameterForm?: string | null, parameterCookie?: string | null, requestBody?: ModelWithString | null, parameterPath1?: string, parameterPath2?: string, parameterPath3?: string, _default?: string]): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'parameters', '{parameter.path.1}', '{parameter-path-2}', '{PARAMETER-PATH-3}', ...params];
        },
        getCallWithOptionalParam(...params: [requestBody?: ModelWithString, parameter?: string]): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'parameters', ...params];
        },
        postCallWithOptionalParam(...params: [parameter?: Pageable, requestBody?: ModelWithString]): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'parameters', ...params];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param parameterHeader This is the parameter that goes into the header
     * @param parameterQuery This is the parameter that goes into the query params
     * @param parameterForm This is the parameter that goes into the form data
     * @param parameterCookie This is the parameter that goes into the cookie
     * @param parameterPath This is the parameter that goes into the path
     * @param requestBody This is the parameter that goes into the body
     * @param options Request option overrides
     * @throws ApiError
     */
    public callWithParameters(
        parameterHeader: string | null,
        parameterQuery: string | null,
        parameterForm: string | null,
        parameterCookie: string | null,
        parameterPath: string | null,
        requestBody: ModelWithString | null,
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Parameters.callWithParameters'],
            path: {
                'parameterPath': parameterPath,
            },
            cookies: {
                'parameterCookie': parameterCookie,
            },
            headers: {
                'parameterHeader': parameterHeader,
            },
            query: {
                'parameterQuery': parameterQuery,
            },
            formData: {
                'parameterForm': parameterForm,
            },
            body: requestBody,
            mediaType: 'application/json',
            ...options,
        });
    }

    /**
     * @param parameterHeader This is the parameter that goes into the request header
     * @param parameterQuery This is the parameter that goes into the request query params
     * @param parameterForm This is the parameter that goes into the request form data
     * @param parameterCookie This is the parameter that goes into the cookie
     * @param requestBody This is the parameter that goes into the body
     * @param parameterPath1 This is the parameter that goes into the path
     * @param parameterPath2 This is the parameter that goes into the path
     * @param parameterPath3 This is the parameter that goes into the path
     * @param _default This is the parameter with a reserved keyword
     * @param options Request option overrides
     * @throws ApiError
     */
    public callWithWeirdParameterNames(
        parameterHeader: string | null,
        parameterQuery: string | null,
        parameterForm: string | null,
        parameterCookie: string | null,
        requestBody: ModelWithString | null,
        parameterPath1?: string,
        parameterPath2?: string,
        parameterPath3?: string,
        _default?: string,
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Parameters.callWithWeirdParameterNames'],
            path: {
                'parameter.path.1': parameterPath1,
                'parameter-path-2': parameterPath2,
                'PARAMETER-PATH-3': parameterPath3,
            },
            cookies: {
                'PARAMETER-COOKIE': parameterCookie,
            },
            headers: {
                'parameter.header': parameterHeader,
            },
            query: {
                'default': _default,
                'parameter-query': parameterQuery,
            },
            formData: {
                'parameter_form': parameterForm,
            },
            body: requestBody,
            mediaType: 'application/json',
            ...options,
        });
    }

    /**
     * @param requestBody This is a required parameter
     * @param parameter This is an optional parameter
     * @param options Request option overrides
     * @throws ApiError
     */
    public getCallWithOptionalParam(
        requestBody: ModelWithString,
        parameter?: string,
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Parameters.getCallWithOptionalParam'],
            query: {
                'parameter': parameter,
            },
            body: requestBody,
            mediaType: 'application/json',
            ...options,
        });
    }

    /**
     * @param parameter This is a required parameter
     * @param requestBody This is an optional parameter
     * @param options Request option overrides
     * @throws ApiError
     */
    public postCallWithOptionalParam(
        parameter: Pageable,
        requestBody?: ModelWithString,
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Parameters.postCallWithOptionalParam'],
            query: {
                'parameter': parameter,
            },
            body: requestBody,
            mediaType: 'application/json',
            ...options,
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/RequestBodySvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ModelWithString } from '../models/ModelWithString';

import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type RequestBodyOperation = 'RequestBody.postApiRequestBody';

const URLs: Record<RequestBodyOperation, { method: ApiRequestMethod; url: string; operation: RequestBodyOperation }> = {
    'RequestBody.postApiRequestBody': { method: 'POST', url: '/api/v{api-version}/requestBody/', operation: 'RequestBody.postApiRequestBody' },
};

const KEY = 'RequestBody';

export class RequestBodySvc {
    declare [OperationsType]: RequestBodyOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        postApiRequestBody(...params: [parameter?: string, requestBody?: ModelWithString]): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'requestBody', ...params];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param parameter This is a reusable parameter
     * @param requestBody A reusable request body
     * @param options Request option overrides
     * @throws ApiError
     */
    public postApiRequestBody(
        parameter?: string,
        requestBody?: ModelWithString,
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['RequestBody.postApiRequestBody'],
            query: {
                'parameter': parameter,
            },
            body: requestBody,
            mediaType: 'application/json',
            ...options,
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/ResponseSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ModelThatExtends } from '../models/ModelThatExtends';
import type { ModelThatExtendsExtends } from '../models/ModelThatExtendsExtends';
import type { ModelWithString } from '../models/ModelWithString';

import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type ResponseOperation = 'Response.callWithResponse' | 'Response.callWithDuplicateResponses' | 'Response.callWithResponses';

const URLs: Record<ResponseOperation, { method: ApiRequestMethod; url: string; operation: ResponseOperation }> = {
    'Response.callWithResponse': { method: 'GET', url: '/api/v{api-version}/response', operation: 'Response.callWithResponse' },
    'Response.callWithDuplicateResponses': { method: 'POST', url: '/api/v{api-version}/response', operation: 'Response.callWithDuplicateResponses' },
    'Response.callWithResponses': { method: 'PUT', url: '/api/v{api-version}/response', operation: 'Response.callWithResponses' },
};

const KEY = 'Response';

export class ResponseSvc {
    declare [OperationsType]: ResponseOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        callWithResponse(): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'response', ];
        },
        callWithDuplicateResponses(): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'response', ];
        },
        callWithResponses(): readonly unknown[] {
            return [KEY, 'PUT', 'api', 'v{api-version}', 'response', ];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param options Request option overrides
     * @returns ModelWithString
     * @throws ApiError
     */
    public callWithResponse(
        options?: Partial<ApiRequestOptions>,
    ): Promise<ModelWithString> {
        return __request(this.config, {
            ...URLs['Response.callWithResponse'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @returns ModelWithString Message for default response
     * @throws ApiError
     */
    public callWithDuplicateResponses(
        options?: Partial<ApiRequestOptions>,
    ): Promise<ModelWithString> {
        return __request(this.config, {
            ...URLs['Response.callWithDuplicateResponses'],
            errors: {
                500: \`Message for 500 error\`,
                501: \`Message for 501 error\`,
                502: \`Message for 502 error\`,
            },
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @returns any Message for 200 response
     * @returns ModelWithString Message for default response
     * @returns ModelThatExtends Message for 201 response
     * @returns ModelThatExtendsExtends Message for 202 response
     * @throws ApiError
     */
    public callWithResponses(
        options?: Partial<ApiRequestOptions>,
    ): Promise<{
        readonly '@namespace.string'?: string;
        readonly '@namespace.integer'?: number;
        readonly value?: Array<ModelWithString>;
    } | ModelWithString | ModelThatExtends | ModelThatExtendsExtends> {
        return __request(this.config, {
            ...URLs['Response.callWithResponses'],
            errors: {
                500: \`Message for 500 error\`,
                501: \`Message for 501 error\`,
                502: \`Message for 502 error\`,
            },
            ...options,
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/SimpleSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type SimpleOperation = 'Simple.getCallWithoutParametersAndResponse' | 'Simple.putCallWithoutParametersAndResponse' | 'Simple.postCallWithoutParametersAndResponse' | 'Simple.deleteCallWithoutParametersAndResponse' | 'Simple.optionsCallWithoutParametersAndResponse' | 'Simple.headCallWithoutParametersAndResponse' | 'Simple.patchCallWithoutParametersAndResponse';

const URLs: Record<SimpleOperation, { method: ApiRequestMethod; url: string; operation: SimpleOperation }> = {
    'Simple.getCallWithoutParametersAndResponse': { method: 'GET', url: '/api/v{api-version}/simple', operation: 'Simple.getCallWithoutParametersAndResponse' },
    'Simple.putCallWithoutParametersAndResponse': { method: 'PUT', url: '/api/v{api-version}/simple', operation: 'Simple.putCallWithoutParametersAndResponse' },
    'Simple.postCallWithoutParametersAndResponse': { method: 'POST', url: '/api/v{api-version}/simple', operation: 'Simple.postCallWithoutParametersAndResponse' },
    'Simple.deleteCallWithoutParametersAndResponse': { method: 'DELETE', url: '/api/v{api-version}/simple', operation: 'Simple.deleteCallWithoutParametersAndResponse' },
    'Simple.optionsCallWithoutParametersAndResponse': { method: 'OPTIONS', url: '/api/v{api-version}/simple', operation: 'Simple.optionsCallWithoutParametersAndResponse' },
    'Simple.headCallWithoutParametersAndResponse': { method: 'HEAD', url: '/api/v{api-version}/simple', operation: 'Simple.headCallWithoutParametersAndResponse' },
    'Simple.patchCallWithoutParametersAndResponse': { method: 'PATCH', url: '/api/v{api-version}/simple', operation: 'Simple.patchCallWithoutParametersAndResponse' },
};

const KEY = 'Simple';

export class SimpleSvc {
    declare [OperationsType]: SimpleOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        getCallWithoutParametersAndResponse(): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'simple', ];
        },
        putCallWithoutParametersAndResponse(): readonly unknown[] {
            return [KEY, 'PUT', 'api', 'v{api-version}', 'simple', ];
        },
        postCallWithoutParametersAndResponse(): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'simple', ];
        },
        deleteCallWithoutParametersAndResponse(): readonly unknown[] {
            return [KEY, 'DELETE', 'api', 'v{api-version}', 'simple', ];
        },
        optionsCallWithoutParametersAndResponse(): readonly unknown[] {
            return [KEY, 'OPTIONS', 'api', 'v{api-version}', 'simple', ];
        },
        headCallWithoutParametersAndResponse(): readonly unknown[] {
            return [KEY, 'HEAD', 'api', 'v{api-version}', 'simple', ];
        },
        patchCallWithoutParametersAndResponse(): readonly unknown[] {
            return [KEY, 'PATCH', 'api', 'v{api-version}', 'simple', ];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public getCallWithoutParametersAndResponse(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Simple.getCallWithoutParametersAndResponse'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public putCallWithoutParametersAndResponse(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Simple.putCallWithoutParametersAndResponse'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public postCallWithoutParametersAndResponse(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Simple.postCallWithoutParametersAndResponse'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public deleteCallWithoutParametersAndResponse(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Simple.deleteCallWithoutParametersAndResponse'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public optionsCallWithoutParametersAndResponse(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Simple.optionsCallWithoutParametersAndResponse'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public headCallWithoutParametersAndResponse(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Simple.headCallWithoutParametersAndResponse'],
            ...options,
        });
    }

    /**
     * @param options Request option overrides
     * @throws ApiError
     */
    public patchCallWithoutParametersAndResponse(
        options?: Partial<ApiRequestOptions>,
    ): Promise<void> {
        return __request(this.config, {
            ...URLs['Simple.patchCallWithoutParametersAndResponse'],
            ...options,
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/TypesSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type TypesOperation = 'Types.types';

const URLs: Record<TypesOperation, { method: ApiRequestMethod; url: string; operation: TypesOperation }> = {
    'Types.types': { method: 'GET', url: '/api/v{api-version}/types', operation: 'Types.types' },
};

const KEY = 'Types';

export class TypesSvc {
    declare [OperationsType]: TypesOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        types(...params: [parameterArray?: Array<string> | null, parameterDictionary?: any, parameterEnum?: 'Success' | 'Warning' | 'Error' | null, parameterNumber?: number, parameterString?: string | null, parameterBoolean?: boolean | null, parameterObject?: any, id?: number]): readonly unknown[] {
            return [KEY, 'GET', 'api', 'v{api-version}', 'types', ...params];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param parameterArray This is an array parameter
     * @param parameterDictionary This is a dictionary parameter
     * @param parameterEnum This is an enum parameter
     * @param parameterNumber This is a number parameter
     * @param parameterString This is a string parameter
     * @param parameterBoolean This is a boolean parameter
     * @param parameterObject This is an object parameter
     * @param id This is a number parameter
     * @param options Request option overrides
     * @returns number Response is a simple number
     * @returns string Response is a simple string
     * @returns boolean Response is a simple boolean
     * @returns any Response is a simple object
     * @throws ApiError
     */
    public types(
        parameterArray: Array<string> | null,
        parameterDictionary: any,
        parameterEnum: 'Success' | 'Warning' | 'Error' | null,
        parameterNumber: number = 123,
        parameterString: string | null = 'default',
        parameterBoolean: boolean | null = true,
        parameterObject: any = null,
        id?: number,
        options?: Partial<ApiRequestOptions>,
    ): Promise<number | string | boolean | any> {
        return __request(this.config, {
            ...URLs['Types.types'],
            path: {
                'id': id,
            },
            query: {
                'parameterNumber': parameterNumber,
                'parameterString': parameterString,
                'parameterBoolean': parameterBoolean,
                'parameterObject': parameterObject,
                'parameterArray': parameterArray,
                'parameterDictionary': parameterDictionary,
                'parameterEnum': parameterEnum,
            },
            ...options,
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/UploadSvc.ts 1`] = `
"/* eslint-disable */
/* istanbul ignore file */
/* tslint:disable */
import type { OperationsType } from '../models/_symbols';
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type UploadOperation = 'Upload.uploadFile';

const URLs: Record<UploadOperation, { method: ApiRequestMethod; url: string; operation: UploadOperation }> = {
    'Upload.uploadFile': { method: 'POST', url: '/api/v{api-version}/upload', operation: 'Upload.uploadFile' },
};

const KEY = 'Upload';

export class UploadSvc {
    declare [OperationsType]: UploadOperation;

    /**
     * Service prefix for operation names.
     */
    public static readonly PREFIX = KEY;

    /**
     * Service URLs and methods.
     */
    public static readonly URLs = URLs;

    /**
     * Operation query keys.
     */
    public static readonly QUERY_KEYS = {
        uploadFile(...params: [file?: Blob]): readonly unknown[] {
            return [KEY, 'POST', 'api', 'v{api-version}', 'upload', ...params];
        },
    };

    /**
     * Configuration for the current service instance.
     */
    public readonly config: OpenAPIConfig;

    constructor(config?: Partial<OpenAPIConfig>) {
        this.config = { ...OpenAPI, ...config };
    }

    /**
     * @param file Supply a file reference for upload
     * @param options Request option overrides
     * @returns boolean
     * @throws ApiError
     */
    public uploadFile(
        file: Blob,
        options?: Partial<ApiRequestOptions>,
    ): Promise<boolean> {
        return __request(this.config, {
            ...URLs['Upload.uploadFile'],
            formData: {
                'file': file,
            },
            ...options,
        });
    }

}
"
`;
