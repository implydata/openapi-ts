{{>header}}

import { createContext, useMemo } from 'react';
import type { ReactNode } from 'react';

import type { OpenAPIConfig } from '../core/OpenAPI';
{{#each services}}
import { {{{name}}}{{{@root.postfix}}} } from '../services/{{{name}}}{{{@root.postfix}}}';
{{/each}}

export interface ServiceContextValue {
	{{#each services}}
	{{{camelCase name}}}: {{{name}}}{{{@root.postfix}}},
	{{/each}}
}

export const ServiceContext = createContext<ServiceContextValue>({
	{{#each services}}
	{{{camelCase name}}}: new {{{name}}}{{{@root.postfix}}}(),
	{{/each}}
});
ServiceContext.displayName = 'ServiceContext';

interface ServiceContextProviderProps extends OpenAPIConfig {
	children?: ReactNode;
	{{#each services}}
	{{{camelCase name}}}?: {{{name}}}{{{@root.postfix}}};
	{{/each}}
}

export function ServiceContextProvider({
	children,
	{{#each services}}
	{{{camelCase name}}},
	{{/each}}
}: ServiceContextProviderProps): JSX.Element {
	const value: ServiceContextValue = useMemo(() => {
		const services = {
			{{#each services}}
			{{{camelCase name}}}: {{{camelCase name}}} ?? new {{{name}}}{{{@root.postfix}}}(),
			{{/each}}
		};
		return services;
	}, [
		{{#each services}}
		{{{camelCase name}}},
		{{/each}}
	]);

	return (<ServiceContext.Provider value={value}>{children}</ServiceContext.Provider>);
}
