{{>header}}

import { createContext, useMemo } from 'react';
import type { ReactNode } from 'react';

import type { OpenAPIConfig } from '../core/OpenAPI';
{{#each services}}
import { {{{name}}}{{{@root.postfix}}} } from '../services/{{{name}}}{{{@root.postfix}}}';
{{/each}}

export interface {{{@root.contextName}}}Value {
	{{#each services}}
	{{{camelCase name}}}: {{{name}}}{{{@root.postfix}}},
	{{/each}}
}

export const {{{@root.contextName}}} = createContext<{{{@root.contextName}}}Value>({
	{{#each services}}
	{{{camelCase name}}}: new {{{name}}}{{{@root.postfix}}}(),
	{{/each}}
});
{{{@root.contextName}}}.displayName = '{{{@root.contextName}}}';

interface {{{@root.contextName}}}ProviderProps extends OpenAPIConfig {
	children?: ReactNode;
	{{#each services}}
	{{{camelCase name}}}?: {{{name}}}{{{@root.postfix}}};
	{{/each}}
}

export function {{{@root.contextName}}}Provider({
	children,
	{{#each services}}
	{{{camelCase name}}},
	{{/each}}
}: {{{@root.contextName}}}ProviderProps): JSX.Element {
	const value: {{{@root.contextName}}}Value = useMemo(() => {
		const services = {
			{{#each services}}
			{{{camelCase name}}}: {{{camelCase name}}} ?? new {{{name}}}{{{@root.postfix}}}(),
			{{/each}}
		};
		return services;
	}, [
		{{#each services}}
		{{{camelCase name}}},
		{{/each}}
	]);

	return (<{{{@root.contextName}}}.Provider value={value}>{children}</{{{@root.contextName}}}.Provider>);
}
