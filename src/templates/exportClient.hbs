{{>header}}

import type { OperationsType, ParametersType } from '../models/_symbols';
{{#if imports}}
{{#each imports}}
import type { {{{this}}} } from '../models/{{{this}}}';
{{/each}}

{{/if}}
import type { ApiRequestMethod, ApiRequestOptions } from '../core/ApiRequestOptions';
import { OpenAPI } from '../core/OpenAPI';
import type { OpenAPIConfig } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export type {{{name}}}Operation ={{~#each operations}}{{~#unless @first}} |{{/unless}} '{{{@root.name}}}.{{{name}}}'{{/each}};

const URLs: Record<{{{name}}}Operation, { method: ApiRequestMethod; url: string; operation: {{{name}}}Operation }> = {
{{#each operations}}
	'{{{@root.name}}}.{{{name}}}': { method: '{{{method}}}', url: '{{{path}}}', operation: '{{{@root.name}}}.{{{name}}}' },
{{/each}}
};

export interface {{{name}}}Parameters {
{{#each operations}}
	'{{{@root.name}}}.{{{name}}}': [{{~#each parameters}}{{{name}}}{{~#unless isRequired}}?{{/unless}}: {{>type}}{{~#unless @last}}, {{/unless}}{{/each}}];
{{/each}}
}

const KEY = '{{{name}}}';

export class {{{name}}}{{{@root.postfix}}} {
	declare [OperationsType]: ApiKeysOperation;
	declare [ParametersType]: ApiKeysParameters;

	/**
	 * Service prefix for operation names.
	 */
	public static readonly PREFIX = KEY;

	/**
	 * Service URLs and methods.
	 */
	public static readonly URLs = URLs;

	/**
	 * Operation query keys.
	 */
	public static readonly QUERY_KEYS = {
	{{#each operations}}
		{{{name}}}({{~#if parameters~}}...params: Partial<{{{@root.name}}}Parameters['{{{@root.name}}}.{{{name}}}']>{{~/if~}}): readonly unknown[] {
			{{#if parameters}}
 			return [KEY, '{{{method}}}', {{#each (queryKey path)}}'{{this}}', {{/each}}...params];
			{{else}}
 			return [KEY, '{{{method}}}', {{#each (queryKey path)}}'{{this}}', {{/each}}];
			{{/if}}
		},
	{{/each}}
	};

	/**
	 * Configuration for the current service instance.
	 */
	public readonly config: OpenAPIConfig;

	constructor(config?: Partial<OpenAPIConfig>) {
		this.config = { ...OpenAPI, ...config };
	}

	{{#each operations}}
	/**
	{{#if deprecated}}
	 * @deprecated
	{{/if}}
	{{#if summary}}
	 * {{{escapeComment summary}}}
	{{/if}}
	{{#if description}}
	 * {{{escapeComment description}}}
	{{/if}}
	{{#if parameters}}
	{{#each parameters}}
	 * @param {{{name}}} {{#if description}}{{{escapeComment description}}}{{/if}}
	{{/each}}
	{{/if}}
	 * @param options Request option overrides
	{{#each results}}
	 * @returns {{{type}}} {{#if description}}{{{escapeComment description}}}{{/if}}
	{{/each}}
	 * @throws ApiError
	 */
	public {{{name}}}(
		{{>parameters}}
		options?: Partial<ApiRequestOptions>,
	): Promise<{{>result}}> {
		return __request(this.config, {
			...URLs['{{{@root.name}}}.{{{name}}}'],
			{{#if parametersPath}}
			path: {
				{{#each parametersPath}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersCookie}}
			cookies: {
				{{#each parametersCookie}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersHeader}}
			headers: {
				{{#each parametersHeader}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersQuery}}
			query: {
				{{#each parametersQuery}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersForm}}
			formData: {
				{{#each parametersForm}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersBody}}
			{{#equals parametersBody.in 'formData'}}
			formData: {{{parametersBody.name}}},
			{{/equals}}
			{{#equals parametersBody.in 'body'}}
			body: {{{parametersBody.name}}},
			{{/equals}}
			{{#if parametersBody.mediaType}}
			mediaType: '{{{parametersBody.mediaType}}}',
			{{/if}}
			{{/if}}
			{{#if responseHeader}}
			responseHeader: '{{{responseHeader}}}',
			{{/if}}
			{{#if errors}}
			errors: {
				{{#each errors}}
				{{{code}}}: `{{{escapeDescription description}}}`,
				{{/each}}
			},
			{{/if}}
			...options,
		});
	}

	{{/each}}
}
