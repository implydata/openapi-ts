/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';

interface ErrorOptions {
	cause?: unknown;
}

export class ApiError extends Error {
	public readonly url: string;
	public readonly status: number;
	public readonly statusText: string;
	public readonly body: any;
	public readonly request: ApiRequestOptions;

	constructor(request: ApiRequestOptions, response: ApiResult, message: string, options?: ErrorOptions) {
		// @ts-ignore -- "options" only available in ES2022+
		super(message, options);

		// Maintains proper stack trace for where our error was thrown (only available on V8)
		if (Error.captureStackTrace) {
		  Error.captureStackTrace(this, ApiError);
		}

		this.name = 'ApiError';
		this.url = response.url;
		this.status = response.status;
		this.statusText = response.statusText;
		this.body = response.body;
		this.request = request;
	}
}

export class CancelError extends Error {
  public readonly request: ApiRequestOptions;

	constructor(request: ApiRequestOptions, message: string, options?: ErrorOptions) {
		// @ts-ignore -- "options" only available in ES2022+
		super(message, options);

		// Maintains proper stack trace for where our error was thrown (only available on V8)
		if (Error.captureStackTrace) {
		Error.captureStackTrace(this, CancelError);
		}

		this.name = 'CancelError';
		this.request = request;
	}

	public get isCancelled(): boolean {
		return true;
	}
}